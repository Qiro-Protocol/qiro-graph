// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Deny extends ethereum.Event {
  get params(): Deny__Params {
    return new Deny__Params(this);
  }
}

export class Deny__Params {
  _event: Deny;

  constructor(event: Deny) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get deployer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get root(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get LenderDeployer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get borrowerDeployer(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class PoolDeployed extends ethereum.Event {
  get params(): PoolDeployed__Params {
    return new PoolDeployed__Params(this);
  }
}

export class PoolDeployed__Params {
  _event: PoolDeployed;

  constructor(event: PoolDeployed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seniorRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get periodLength(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get periodCount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get gracePeriod(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get shelf(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class Rely extends ethereum.Event {
  get params(): Rely__Params {
    return new Rely__Params(this);
  }
}

export class Rely__Params {
  _event: Rely;

  constructor(event: Rely) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class QiroFactory__poolListResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getDeployer(): Address {
    return this.value1;
  }

  getRoot(): Address {
    return this.value2;
  }

  getLenderDeployer(): Address {
    return this.value3;
  }

  getBorrowerDeployer(): Address {
    return this.value4;
  }
}

export class QiroFactory__poolsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getDeployer(): Address {
    return this.value1;
  }

  getRoot(): Address {
    return this.value2;
  }

  getLenderDeployer(): Address {
    return this.value3;
  }

  getBorrowerDeployer(): Address {
    return this.value4;
  }
}

export class QiroFactory extends ethereum.SmartContract {
  static bind(address: Address): QiroFactory {
    return new QiroFactory("QiroFactory", address);
  }

  assessorFab(): Address {
    let result = super.call("assessorFab", "assessorFab():(address)", []);

    return result[0].toAddress();
  }

  try_assessorFab(): ethereum.CallResult<Address> {
    let result = super.tryCall("assessorFab", "assessorFab():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createPool(
    borrowerAddress: Address,
    juniorTokenName: string,
    juniorTokenSymbol: string,
    seniorTokenName: string,
    seniorTokenSymbol: string,
    lenderParams: Array<BigInt>,
    shelfParams: Array<BigInt>,
    isBulletRepay: boolean,
    fee: Array<i32>,
  ): BigInt {
    let result = super.call(
      "createPool",
      "createPool(address,string,string,string,string,uint256[4],uint256[5],bool,uint16[2]):(uint256)",
      [
        ethereum.Value.fromAddress(borrowerAddress),
        ethereum.Value.fromString(juniorTokenName),
        ethereum.Value.fromString(juniorTokenSymbol),
        ethereum.Value.fromString(seniorTokenName),
        ethereum.Value.fromString(seniorTokenSymbol),
        ethereum.Value.fromUnsignedBigIntArray(lenderParams),
        ethereum.Value.fromUnsignedBigIntArray(shelfParams),
        ethereum.Value.fromBoolean(isBulletRepay),
        ethereum.Value.fromI32Array(fee),
      ],
    );

    return result[0].toBigInt();
  }

  try_createPool(
    borrowerAddress: Address,
    juniorTokenName: string,
    juniorTokenSymbol: string,
    seniorTokenName: string,
    seniorTokenSymbol: string,
    lenderParams: Array<BigInt>,
    shelfParams: Array<BigInt>,
    isBulletRepay: boolean,
    fee: Array<i32>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createPool",
      "createPool(address,string,string,string,string,uint256[4],uint256[5],bool,uint16[2]):(uint256)",
      [
        ethereum.Value.fromAddress(borrowerAddress),
        ethereum.Value.fromString(juniorTokenName),
        ethereum.Value.fromString(juniorTokenSymbol),
        ethereum.Value.fromString(seniorTokenName),
        ethereum.Value.fromString(seniorTokenSymbol),
        ethereum.Value.fromUnsignedBigIntArray(lenderParams),
        ethereum.Value.fromUnsignedBigIntArray(shelfParams),
        ethereum.Value.fromBoolean(isBulletRepay),
        ethereum.Value.fromI32Array(fee),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currency(): Address {
    let result = super.call("currency", "currency():(address)", []);

    return result[0].toAddress();
  }

  try_currency(): ethereum.CallResult<Address> {
    let result = super.tryCall("currency", "currency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultInterestRate(): BigInt {
    let result = super.call(
      "defaultInterestRate",
      "defaultInterestRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_defaultInterestRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultInterestRate",
      "defaultInterestRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultLateFeeInterest(): BigInt {
    let result = super.call(
      "defaultLateFeeInterest",
      "defaultLateFeeInterest():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_defaultLateFeeInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultLateFeeInterest",
      "defaultLateFeeInterest():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultSeniorRate(): BigInt {
    let result = super.call(
      "defaultSeniorRate",
      "defaultSeniorRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_defaultSeniorRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultSeniorRate",
      "defaultSeniorRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributorFab(): Address {
    let result = super.call("distributorFab", "distributorFab():(address)", []);

    return result[0].toAddress();
  }

  try_distributorFab(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "distributorFab",
      "distributorFab():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftFeedFab(): Address {
    let result = super.call("nftFeedFab", "nftFeedFab():(address)", []);

    return result[0].toAddress();
  }

  try_nftFeedFab(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftFeedFab", "nftFeedFab():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  operatorFab(): Address {
    let result = super.call("operatorFab", "operatorFab():(address)", []);

    return result[0].toAddress();
  }

  try_operatorFab(): ethereum.CallResult<Address> {
    let result = super.tryCall("operatorFab", "operatorFab():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolCount(): BigInt {
    let result = super.call("poolCount", "poolCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolCount", "poolCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolList(param0: BigInt): QiroFactory__poolListResult {
    let result = super.call(
      "poolList",
      "poolList(uint256):(uint256,address,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new QiroFactory__poolListResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
    );
  }

  try_poolList(
    param0: BigInt,
  ): ethereum.CallResult<QiroFactory__poolListResult> {
    let result = super.tryCall(
      "poolList",
      "poolList(uint256):(uint256,address,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QiroFactory__poolListResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
      ),
    );
  }

  pools(param0: BigInt): QiroFactory__poolsResult {
    let result = super.call(
      "pools",
      "pools(uint256):(uint256,address,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new QiroFactory__poolsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
    );
  }

  try_pools(param0: BigInt): ethereum.CallResult<QiroFactory__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(uint256):(uint256,address,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QiroFactory__poolsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
      ),
    );
  }

  pricePoolFab(): Address {
    let result = super.call("pricePoolFab", "pricePoolFab():(address)", []);

    return result[0].toAddress();
  }

  try_pricePoolFab(): ethereum.CallResult<Address> {
    let result = super.tryCall("pricePoolFab", "pricePoolFab():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  qiroFeeCollector(): Address {
    let result = super.call(
      "qiroFeeCollector",
      "qiroFeeCollector():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_qiroFeeCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "qiroFeeCollector",
      "qiroFeeCollector():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  seniorTrancheFab(): Address {
    let result = super.call(
      "seniorTrancheFab",
      "seniorTrancheFab():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_seniorTrancheFab(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "seniorTrancheFab",
      "seniorTrancheFab():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shelfFab(): Address {
    let result = super.call("shelfFab", "shelfFab():(address)", []);

    return result[0].toAddress();
  }

  try_shelfFab(): ethereum.CallResult<Address> {
    let result = super.tryCall("shelfFab", "shelfFab():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  titleFab(): Address {
    let result = super.call("titleFab", "titleFab():(address)", []);

    return result[0].toAddress();
  }

  try_titleFab(): ethereum.CallResult<Address> {
    let result = super.tryCall("titleFab", "titleFab():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trancheFab(): Address {
    let result = super.call("trancheFab", "trancheFab():(address)", []);

    return result[0].toAddress();
  }

  try_trancheFab(): ethereum.CallResult<Address> {
    let result = super.tryCall("trancheFab", "trancheFab():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _qiroFeeCollector(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get borrowerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get juniorTokenName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get juniorTokenSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get seniorTokenName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get seniorTokenSymbol(): string {
    return this._call.inputValues[4].value.toString();
  }

  get lenderParams(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get shelfParams(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get isBulletRepay(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get fee(): Array<i32> {
    return this._call.inputValues[8].value.toI32Array();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DenyContractCall extends ethereum.Call {
  get inputs(): DenyContractCall__Inputs {
    return new DenyContractCall__Inputs(this);
  }

  get outputs(): DenyContractCall__Outputs {
    return new DenyContractCall__Outputs(this);
  }
}

export class DenyContractCall__Inputs {
  _call: DenyContractCall;

  constructor(call: DenyContractCall) {
    this._call = call;
  }

  get contract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get usr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DenyContractCall__Outputs {
  _call: DenyContractCall;

  constructor(call: DenyContractCall) {
    this._call = call;
  }
}

export class DenyContractFromRootCall extends ethereum.Call {
  get inputs(): DenyContractFromRootCall__Inputs {
    return new DenyContractFromRootCall__Inputs(this);
  }

  get outputs(): DenyContractFromRootCall__Outputs {
    return new DenyContractFromRootCall__Outputs(this);
  }
}

export class DenyContractFromRootCall__Inputs {
  _call: DenyContractFromRootCall;

  constructor(call: DenyContractFromRootCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get contract_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get usr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DenyContractFromRootCall__Outputs {
  _call: DenyContractFromRootCall;

  constructor(call: DenyContractFromRootCall) {
    this._call = call;
  }
}

export class DeployPoolCall extends ethereum.Call {
  get inputs(): DeployPoolCall__Inputs {
    return new DeployPoolCall__Inputs(this);
  }

  get outputs(): DeployPoolCall__Outputs {
    return new DeployPoolCall__Outputs(this);
  }
}

export class DeployPoolCall__Inputs {
  _call: DeployPoolCall;

  constructor(call: DeployPoolCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get seniorTokenName_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get seniorTokenSymbol_(): string {
    return this._call.inputValues[3].value.toString();
  }

  get lenderParams(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get shelfParams(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get isBulletRepay(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get fee(): Array<i32> {
    return this._call.inputValues[7].value.toI32Array();
  }
}

export class DeployPoolCall__Outputs {
  _call: DeployPoolCall;

  constructor(call: DeployPoolCall) {
    this._call = call;
  }
}

export class Init_borrowerContractsCall extends ethereum.Call {
  get inputs(): Init_borrowerContractsCall__Inputs {
    return new Init_borrowerContractsCall__Inputs(this);
  }

  get outputs(): Init_borrowerContractsCall__Outputs {
    return new Init_borrowerContractsCall__Outputs(this);
  }
}

export class Init_borrowerContractsCall__Inputs {
  _call: Init_borrowerContractsCall;

  constructor(call: Init_borrowerContractsCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get shelfParams(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get isBulletRepay(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get fee(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }
}

export class Init_borrowerContractsCall__Outputs {
  _call: Init_borrowerContractsCall;

  constructor(call: Init_borrowerContractsCall) {
    this._call = call;
  }
}

export class Init_lenderContractsCall extends ethereum.Call {
  get inputs(): Init_lenderContractsCall__Inputs {
    return new Init_lenderContractsCall__Inputs(this);
  }

  get outputs(): Init_lenderContractsCall__Outputs {
    return new Init_lenderContractsCall__Outputs(this);
  }
}

export class Init_lenderContractsCall__Inputs {
  _call: Init_lenderContractsCall;

  constructor(call: Init_lenderContractsCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get seniorRate_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get seniorTokenName_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get seniorTokenSymbol_(): string {
    return this._call.inputValues[3].value.toString();
  }

  get juniorCeiling(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get seniorCeiling(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get capitalFormationPeriod(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class Init_lenderContractsCall__Outputs {
  _call: Init_lenderContractsCall;

  constructor(call: Init_lenderContractsCall) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class RelyContractCall extends ethereum.Call {
  get inputs(): RelyContractCall__Inputs {
    return new RelyContractCall__Inputs(this);
  }

  get outputs(): RelyContractCall__Outputs {
    return new RelyContractCall__Outputs(this);
  }
}

export class RelyContractCall__Inputs {
  _call: RelyContractCall;

  constructor(call: RelyContractCall) {
    this._call = call;
  }

  get contract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get usr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RelyContractCall__Outputs {
  _call: RelyContractCall;

  constructor(call: RelyContractCall) {
    this._call = call;
  }
}

export class RelyContractFromRootCall extends ethereum.Call {
  get inputs(): RelyContractFromRootCall__Inputs {
    return new RelyContractFromRootCall__Inputs(this);
  }

  get outputs(): RelyContractFromRootCall__Outputs {
    return new RelyContractFromRootCall__Outputs(this);
  }
}

export class RelyContractFromRootCall__Inputs {
  _call: RelyContractFromRootCall;

  constructor(call: RelyContractFromRootCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get contract_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get usr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RelyContractFromRootCall__Outputs {
  _call: RelyContractFromRootCall;

  constructor(call: RelyContractFromRootCall) {
    this._call = call;
  }
}

export class SetContractsCall extends ethereum.Call {
  get inputs(): SetContractsCall__Inputs {
    return new SetContractsCall__Inputs(this);
  }

  get outputs(): SetContractsCall__Outputs {
    return new SetContractsCall__Outputs(this);
  }
}

export class SetContractsCall__Inputs {
  _call: SetContractsCall;

  constructor(call: SetContractsCall) {
    this._call = call;
  }

  get _operatorFab(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _assessorFab(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _seniorTrancheFab(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _trancheFab(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _distributorFab(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _shelfFab(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _pricePoolFab(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _titleFab(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _nftFeedFab(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class SetContractsCall__Outputs {
  _call: SetContractsCall;

  constructor(call: SetContractsCall) {
    this._call = call;
  }
}
