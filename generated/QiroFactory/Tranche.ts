// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AuthTransfer extends ethereum.Event {
  get params(): AuthTransfer__Params {
    return new AuthTransfer__Params(this);
  }
}

export class AuthTransfer__Params {
  _event: AuthTransfer;

  constructor(event: AuthTransfer) {
    this._event = event;
  }

  get erc20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deny extends ethereum.Event {
  get params(): Deny__Params {
    return new Deny__Params(this);
  }
}

export class Deny__Params {
  _event: Deny;

  constructor(event: Deny) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Depend extends ethereum.Event {
  get params(): Depend__Params {
    return new Depend__Params(this);
  }
}

export class Depend__Params {
  _event: Depend;

  constructor(event: Depend) {
    this._event = event;
  }

  get contractName(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Rely extends ethereum.Event {
  get params(): Rely__Params {
    return new Rely__Params(this);
  }
}

export class Rely__Params {
  _event: Rely;

  constructor(event: Rely) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Tranche extends ethereum.SmartContract {
  static bind(address: Address): Tranche {
    return new Tranche("Tranche", address);
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currency(): Address {
    let result = super.call("currency", "currency():(address)", []);

    return result[0].toAddress();
  }

  try_currency(): ethereum.CallResult<Address> {
    let result = super.tryCall("currency", "currency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rdiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rdiv", "rdiv(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_rdiv(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rdiv", "rdiv(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rmul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rmul", "rmul(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_rmul(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rmul", "rmul(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeAdd(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeAdd", "safeAdd(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeAdd(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeAdd",
      "safeAdd(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeDiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeDiv", "safeDiv(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeDiv(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeDiv",
      "safeDiv(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeMul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeMul", "safeMul(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeMul(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeMul",
      "safeMul(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeSub(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeSub", "safeSub(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeSub(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeSub",
      "safeSub(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  self(): Address {
    let result = super.call("self", "self():(address)", []);

    return result[0].toAddress();
  }

  try_self(): ethereum.CallResult<Address> {
    let result = super.tryCall("self", "self():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenSupply(): BigInt {
    let result = super.call("tokenSupply", "tokenSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenSupply", "tokenSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currency_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthTransferCall extends ethereum.Call {
  get inputs(): AuthTransferCall__Inputs {
    return new AuthTransferCall__Inputs(this);
  }

  get outputs(): AuthTransferCall__Outputs {
    return new AuthTransferCall__Outputs(this);
  }
}

export class AuthTransferCall__Inputs {
  _call: AuthTransferCall;

  constructor(call: AuthTransferCall) {
    this._call = call;
  }

  get erc20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get usr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AuthTransferCall__Outputs {
  _call: AuthTransferCall;

  constructor(call: AuthTransferCall) {
    this._call = call;
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DependCall extends ethereum.Call {
  get inputs(): DependCall__Inputs {
    return new DependCall__Inputs(this);
  }

  get outputs(): DependCall__Outputs {
    return new DependCall__Outputs(this);
  }
}

export class DependCall__Inputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }

  get contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DependCall__Outputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class SupplyCall extends ethereum.Call {
  get inputs(): SupplyCall__Inputs {
    return new SupplyCall__Inputs(this);
  }

  get outputs(): SupplyCall__Outputs {
    return new SupplyCall__Outputs(this);
  }
}

export class SupplyCall__Inputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SupplyCall__Outputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }
}
