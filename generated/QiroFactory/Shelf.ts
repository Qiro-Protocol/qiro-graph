// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Deny extends ethereum.Event {
  get params(): Deny__Params {
    return new Deny__Params(this);
  }
}

export class Deny__Params {
  _event: Deny;

  constructor(event: Deny) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LoanEnded extends ethereum.Event {
  get params(): LoanEnded__Params {
    return new LoanEnded__Params(this);
  }
}

export class LoanEnded__Params {
  _event: LoanEnded;

  constructor(event: LoanEnded) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _nft(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get principalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalRepayedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalPrincipalRepayed(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LoanIssued extends ethereum.Event {
  get params(): LoanIssued__Params {
    return new LoanIssued__Params(this);
  }
}

export class LoanIssued__Params {
  _event: LoanIssued;

  constructor(event: LoanIssued) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LoanRepayed extends ethereum.Event {
  get params(): LoanRepayed__Params {
    return new LoanRepayed__Params(this);
  }
}

export class LoanRepayed__Params {
  _event: LoanRepayed;

  constructor(event: LoanRepayed) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalRepayedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalPrincipalRepayed(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get currentPeriod(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get nextExpectedRepaymentAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class LoanStarted extends ethereum.Event {
  get params(): LoanStarted__Params {
    return new LoanStarted__Params(this);
  }
}

export class LoanStarted__Params {
  _event: LoanStarted;

  constructor(event: LoanStarted) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nft(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get principalAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get periodCount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get loanTerm(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get shelfBalance(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get currentPeriod(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get nextExpectedRepaymentAmount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class LoanWithdrawn extends ethereum.Event {
  get params(): LoanWithdrawn__Params {
    return new LoanWithdrawn__Params(this);
  }
}

export class LoanWithdrawn__Params {
  _event: LoanWithdrawn;

  constructor(event: LoanWithdrawn) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get balance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Rely extends ethereum.Event {
  get params(): Rely__Params {
    return new Rely__Params(this);
  }
}

export class Rely__Params {
  _event: Rely;

  constructor(event: Rely) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Shelf__allFeesResult {
  value0: string;
  value1: i32;

  constructor(value0: string, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getAmount(): i32 {
    return this.value1;
  }
}

export class Shelf__balanceRequestResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Shelf__compoundingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Shelf__expectedRepaymentAmountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTotalExpected(): BigInt {
    return this.value0;
  }

  getPricipal(): BigInt {
    return this.value1;
  }
}

export class Shelf__tokenResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_registry(): Address {
    return this.value0;
  }

  getNft(): BigInt {
    return this.value1;
  }
}

export class Shelf extends ethereum.SmartContract {
  static bind(address: Address): Shelf {
    return new Shelf("Shelf", address);
  }

  LOAN_NEXT_PERIOD_END_TIMESTAMP(): BigInt {
    let result = super.call(
      "LOAN_NEXT_PERIOD_END_TIMESTAMP",
      "LOAN_NEXT_PERIOD_END_TIMESTAMP():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_LOAN_NEXT_PERIOD_END_TIMESTAMP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LOAN_NEXT_PERIOD_END_TIMESTAMP",
      "LOAN_NEXT_PERIOD_END_TIMESTAMP():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LOAN_START_TIMESTAMP(): BigInt {
    let result = super.call(
      "LOAN_START_TIMESTAMP",
      "LOAN_START_TIMESTAMP():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_LOAN_START_TIMESTAMP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LOAN_START_TIMESTAMP",
      "LOAN_START_TIMESTAMP():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allFees(param0: BigInt): Shelf__allFeesResult {
    let result = super.call("allFees", "allFees(uint256):(string,uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return new Shelf__allFeesResult(result[0].toString(), result[1].toI32());
  }

  try_allFees(param0: BigInt): ethereum.CallResult<Shelf__allFeesResult> {
    let result = super.tryCall("allFees", "allFees(uint256):(string,uint16)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shelf__allFeesResult(value[0].toString(), value[1].toI32()),
    );
  }

  assetNFT(): Address {
    let result = super.call("assetNFT", "assetNFT():(address)", []);

    return result[0].toAddress();
  }

  try_assetNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("assetNFT", "assetNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceRequest(): Shelf__balanceRequestResult {
    let result = super.call(
      "balanceRequest",
      "balanceRequest():(bool,uint256)",
      [],
    );

    return new Shelf__balanceRequestResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
    );
  }

  try_balanceRequest(): ethereum.CallResult<Shelf__balanceRequestResult> {
    let result = super.tryCall(
      "balanceRequest",
      "balanceRequest():(bool,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shelf__balanceRequestResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
      ),
    );
  }

  borrower(): Address {
    let result = super.call("borrower", "borrower():(address)", []);

    return result[0].toAddress();
  }

  try_borrower(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrower", "borrower():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  chargeInterest(
    interestBearingAmount: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt,
  ): BigInt {
    let result = super.call(
      "chargeInterest",
      "chargeInterest(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(interestBearingAmount),
        ethereum.Value.fromUnsignedBigInt(ratePerSecond),
        ethereum.Value.fromUnsignedBigInt(lastUpdated),
      ],
    );

    return result[0].toBigInt();
  }

  try_chargeInterest(
    interestBearingAmount: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "chargeInterest",
      "chargeInterest(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(interestBearingAmount),
        ethereum.Value.fromUnsignedBigInt(ratePerSecond),
        ethereum.Value.fromUnsignedBigInt(lastUpdated),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  compounding(
    chi: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt,
    pie: BigInt,
  ): Shelf__compoundingResult {
    let result = super.call(
      "compounding",
      "compounding(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(chi),
        ethereum.Value.fromUnsignedBigInt(ratePerSecond),
        ethereum.Value.fromUnsignedBigInt(lastUpdated),
        ethereum.Value.fromUnsignedBigInt(pie),
      ],
    );

    return new Shelf__compoundingResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_compounding(
    chi: BigInt,
    ratePerSecond: BigInt,
    lastUpdated: BigInt,
    pie: BigInt,
  ): ethereum.CallResult<Shelf__compoundingResult> {
    let result = super.tryCall(
      "compounding",
      "compounding(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(chi),
        ethereum.Value.fromUnsignedBigInt(ratePerSecond),
        ethereum.Value.fromUnsignedBigInt(lastUpdated),
        ethereum.Value.fromUnsignedBigInt(pie),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shelf__compoundingResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  currency(): Address {
    let result = super.call("currency", "currency():(address)", []);

    return result[0].toAddress();
  }

  try_currency(): ethereum.CallResult<Address> {
    let result = super.tryCall("currency", "currency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentPeriod(): BigInt {
    let result = super.call("currentPeriod", "currentPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentPeriod",
      "currentPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debt(): BigInt {
    let result = super.call("debt", "debt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_debt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("debt", "debt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributor(): Address {
    let result = super.call("distributor", "distributor():(address)", []);

    return result[0].toAddress();
  }

  try_distributor(): ethereum.CallResult<Address> {
    let result = super.tryCall("distributor", "distributor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  expectedRepaymentAmount(): Shelf__expectedRepaymentAmountResult {
    let result = super.call(
      "expectedRepaymentAmount",
      "expectedRepaymentAmount():(uint256,uint256)",
      [],
    );

    return new Shelf__expectedRepaymentAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_expectedRepaymentAmount(): ethereum.CallResult<Shelf__expectedRepaymentAmountResult> {
    let result = super.tryCall(
      "expectedRepaymentAmount",
      "expectedRepaymentAmount():(uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shelf__expectedRepaymentAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getInterestThisPeriod(): BigInt {
    let result = super.call(
      "getInterestThisPeriod",
      "getInterestThisPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getInterestThisPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInterestThisPeriod",
      "getInterestThisPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gracePeriod(): BigInt {
    let result = super.call("gracePeriod", "gracePeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gracePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gracePeriod", "gracePeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasPoolBorrowed(): boolean {
    let result = super.call("hasPoolBorrowed", "hasPoolBorrowed():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasPoolBorrowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasPoolBorrowed",
      "hasPoolBorrowed():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  interestAccuredSoFar(): BigInt {
    let result = super.call(
      "interestAccuredSoFar",
      "interestAccuredSoFar():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_interestAccuredSoFar(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestAccuredSoFar",
      "interestAccuredSoFar():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestAccuredSoFarByPeriod(): BigInt {
    let result = super.call(
      "interestAccuredSoFarByPeriod",
      "interestAccuredSoFarByPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_interestAccuredSoFarByPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestAccuredSoFarByPeriod",
      "interestAccuredSoFarByPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isBulletRepay(): boolean {
    let result = super.call("isBulletRepay", "isBulletRepay():(bool)", []);

    return result[0].toBoolean();
  }

  try_isBulletRepay(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBulletRepay", "isBulletRepay():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidForRepayment(): boolean {
    let result = super.call(
      "isValidForRepayment",
      "isValidForRepayment():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_isValidForRepayment(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidForRepayment",
      "isValidForRepayment():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastUpdated(): BigInt {
    let result = super.call("lastUpdated", "lastUpdated():(uint48)", []);

    return result[0].toBigInt();
  }

  try_lastUpdated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastUpdated", "lastUpdated():(uint48)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lateFeeInterestRate(): BigInt {
    let result = super.call(
      "lateFeeInterestRate",
      "lateFeeInterestRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lateFeeInterestRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lateFeeInterestRate",
      "lateFeeInterestRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lender(): Address {
    let result = super.call("lender", "lender():(address)", []);

    return result[0].toAddress();
  }

  try_lender(): ethereum.CallResult<Address> {
    let result = super.tryCall("lender", "lender():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  loanEnded(): boolean {
    let result = super.call("loanEnded", "loanEnded():(bool)", []);

    return result[0].toBoolean();
  }

  try_loanEnded(): ethereum.CallResult<boolean> {
    let result = super.tryCall("loanEnded", "loanEnded():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loanTerm(): BigInt {
    let result = super.call("loanTerm", "loanTerm():(uint256)", []);

    return result[0].toBigInt();
  }

  try_loanTerm(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("loanTerm", "loanTerm():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftLocked(): boolean {
    let result = super.call("nftLocked", "nftLocked():(bool)", []);

    return result[0].toBoolean();
  }

  try_nftLocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("nftLocked", "nftLocked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pStartFrom(): BigInt {
    let result = super.call("pStartFrom", "pStartFrom():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pStartFrom(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pStartFrom", "pStartFrom():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodCount(): BigInt {
    let result = super.call("periodCount", "periodCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodCount", "periodCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodLength(): BigInt {
    let result = super.call("periodLength", "periodLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodLength", "periodLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolId(): BigInt {
    let result = super.call("poolId", "poolId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolId", "poolId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalAmount(): BigInt {
    let result = super.call(
      "principalAmount",
      "principalAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_principalAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalAmount",
      "principalAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  qiroFeeCollector(): Address {
    let result = super.call(
      "qiroFeeCollector",
      "qiroFeeCollector():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_qiroFeeCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "qiroFeeCollector",
      "qiroFeeCollector():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ratePerSecond(): BigInt {
    let result = super.call("ratePerSecond", "ratePerSecond():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ratePerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ratePerSecond",
      "ratePerSecond():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rdiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rdiv", "rdiv(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_rdiv(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rdiv", "rdiv(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rmul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rmul", "rmul(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_rmul(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rmul", "rmul(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rpow(x: BigInt, n: BigInt, base: BigInt): BigInt {
    let result = super.call("rpow", "rpow(uint256,uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(n),
      ethereum.Value.fromUnsignedBigInt(base),
    ]);

    return result[0].toBigInt();
  }

  try_rpow(x: BigInt, n: BigInt, base: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rpow",
      "rpow(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(n),
        ethereum.Value.fromUnsignedBigInt(base),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeAdd(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeAdd", "safeAdd(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeAdd(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeAdd",
      "safeAdd(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeDiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeDiv", "safeDiv(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeDiv(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeDiv",
      "safeDiv(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeMul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeMul", "safeMul(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeMul(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeMul",
      "safeMul(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeSub(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeSub", "safeSub(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeSub(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeSub",
      "safeSub(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  takeOriginatorFee(): BigInt {
    let result = super.call(
      "takeOriginatorFee",
      "takeOriginatorFee():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_takeOriginatorFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "takeOriginatorFee",
      "takeOriginatorFee():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toAmount(chi: BigInt, pie: BigInt): BigInt {
    let result = super.call("toAmount", "toAmount(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(chi),
      ethereum.Value.fromUnsignedBigInt(pie),
    ]);

    return result[0].toBigInt();
  }

  try_toAmount(chi: BigInt, pie: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toAmount",
      "toAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(chi),
        ethereum.Value.fromUnsignedBigInt(pie),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Shelf__tokenResult {
    let result = super.call("token", "token():(address,uint256)", []);

    return new Shelf__tokenResult(result[0].toAddress(), result[1].toBigInt());
  }

  try_token(): ethereum.CallResult<Shelf__tokenResult> {
    let result = super.tryCall("token", "token():(address,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Shelf__tokenResult(value[0].toAddress(), value[1].toBigInt()),
    );
  }

  total(): BigInt {
    let result = super.call("total", "total():(uint256)", []);

    return result[0].toBigInt();
  }

  try_total(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("total", "total():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterest(period: BigInt): BigInt {
    let result = super.call(
      "totalInterest",
      "totalInterest(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(period)],
    );

    return result[0].toBigInt();
  }

  try_totalInterest(period: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterest",
      "totalInterest(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(period)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestForLoanTerm(): BigInt {
    let result = super.call(
      "totalInterestForLoanTerm",
      "totalInterestForLoanTerm():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalInterestForLoanTerm(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestForLoanTerm",
      "totalInterestForLoanTerm():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPrincipalRepayed(): BigInt {
    let result = super.call(
      "totalPrincipalRepayed",
      "totalPrincipalRepayed():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalPrincipalRepayed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrincipalRepayed",
      "totalPrincipalRepayed():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRepayedAmount(): BigInt {
    let result = super.call(
      "totalRepayedAmount",
      "totalRepayedAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalRepayedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRepayedAmount",
      "totalRepayedAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get borrower_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get currency_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get title_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _qiroFeeCollector(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get arrayParams(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get _isBulletRepay(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get arrayFees(): Array<i32> {
    return this._call.inputValues[7].value.toI32Array();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DependCall extends ethereum.Call {
  get inputs(): DependCall__Inputs {
    return new DependCall__Inputs(this);
  }

  get outputs(): DependCall__Outputs {
    return new DependCall__Outputs(this);
  }
}

export class DependCall__Inputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }

  get contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DependCall__Outputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }
}

export class FileCall extends ethereum.Call {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class Init_borrowCall extends ethereum.Call {
  get inputs(): Init_borrowCall__Inputs {
    return new Init_borrowCall__Inputs(this);
  }

  get outputs(): Init_borrowCall__Outputs {
    return new Init_borrowCall__Outputs(this);
  }
}

export class Init_borrowCall__Inputs {
  _call: Init_borrowCall;

  constructor(call: Init_borrowCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nftTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Init_borrowCall__Outputs {
  _call: Init_borrowCall;

  constructor(call: Init_borrowCall) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class TakeOriginatorFeeCall extends ethereum.Call {
  get inputs(): TakeOriginatorFeeCall__Inputs {
    return new TakeOriginatorFeeCall__Inputs(this);
  }

  get outputs(): TakeOriginatorFeeCall__Outputs {
    return new TakeOriginatorFeeCall__Outputs(this);
  }
}

export class TakeOriginatorFeeCall__Inputs {
  _call: TakeOriginatorFeeCall;

  constructor(call: TakeOriginatorFeeCall) {
    this._call = call;
  }
}

export class TakeOriginatorFeeCall__Outputs {
  _call: TakeOriginatorFeeCall;

  constructor(call: TakeOriginatorFeeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UpdateBorrowerAddressCall extends ethereum.Call {
  get inputs(): UpdateBorrowerAddressCall__Inputs {
    return new UpdateBorrowerAddressCall__Inputs(this);
  }

  get outputs(): UpdateBorrowerAddressCall__Outputs {
    return new UpdateBorrowerAddressCall__Outputs(this);
  }
}

export class UpdateBorrowerAddressCall__Inputs {
  _call: UpdateBorrowerAddressCall;

  constructor(call: UpdateBorrowerAddressCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateBorrowerAddressCall__Outputs {
  _call: UpdateBorrowerAddressCall;

  constructor(call: UpdateBorrowerAddressCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get usr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
