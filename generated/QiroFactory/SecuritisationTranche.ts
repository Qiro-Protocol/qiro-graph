// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deny extends ethereum.Event {
  get params(): Deny__Params {
    return new Deny__Params(this);
  }
}

export class Deny__Params {
  _event: Deny;

  constructor(event: Deny) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Depend extends ethereum.Event {
  get params(): Depend__Params {
    return new Depend__Params(this);
  }
}

export class Depend__Params {
  _event: Depend;

  constructor(event: Depend) {
    this._event = event;
  }

  get contractName(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Erc20Transfer extends ethereum.Event {
  get params(): Erc20Transfer__Params {
    return new Erc20Transfer__Params(this);
  }
}

export class Erc20Transfer__Params {
  _event: Erc20Transfer;

  constructor(event: Erc20Transfer) {
    this._event = event;
  }

  get erc20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Filed extends ethereum.Event {
  get params(): Filed__Params {
    return new Filed__Params(this);
  }
}

export class Filed__Params {
  _event: Filed;

  constructor(event: Filed) {
    this._event = event;
  }

  get what(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Rely extends ethereum.Event {
  get params(): Rely__Params {
    return new Rely__Params(this);
  }
}

export class Rely__Params {
  _event: Rely;

  constructor(event: Rely) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get principalAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get prePaymentPrincipalAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Supply extends ethereum.Event {
  get params(): Supply__Params {
    return new Supply__Params(this);
  }
}

export class Supply__Params {
  _event: Supply;

  constructor(event: Supply) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SecuritisationTranche extends ethereum.SmartContract {
  static bind(address: Address): SecuritisationTranche {
    return new SecuritisationTranche("SecuritisationTranche", address);
  }

  MAX_APR_RATE(): BigInt {
    let result = super.call("MAX_APR_RATE", "MAX_APR_RATE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_APR_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_APR_RATE", "MAX_APR_RATE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PERFORMANCE_FEE(): BigInt {
    let result = super.call(
      "MAX_PERFORMANCE_FEE",
      "MAX_PERFORMANCE_FEE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_PERFORMANCE_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PERFORMANCE_FEE",
      "MAX_PERFORMANCE_FEE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PERIOD(): BigInt {
    let result = super.call("MAX_PERIOD", "MAX_PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_PERIOD", "MAX_PERIOD():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_PERIOD(): BigInt {
    let result = super.call("MIN_PERIOD", "MIN_PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_PERIOD", "MIN_PERIOD():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aprInBps(): BigInt {
    let result = super.call("aprInBps", "aprInBps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_aprInBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("aprInBps", "aprInBps():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowInitTimestamp(): BigInt {
    let result = super.call(
      "borrowInitTimestamp",
      "borrowInitTimestamp():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_borrowInitTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowInitTimestamp",
      "borrowInitTimestamp():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currency(): Address {
    let result = super.call("currency", "currency():(address)", []);

    return result[0].toAddress();
  }

  try_currency(): ethereum.CallResult<Address> {
    let result = super.tryCall("currency", "currency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDaysSinceLastRepayment(): BigInt {
    let result = super.call(
      "getDaysSinceLastRepayment",
      "getDaysSinceLastRepayment():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getDaysSinceLastRepayment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDaysSinceLastRepayment",
      "getDaysSinceLastRepayment():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestRepaid(): BigInt {
    let result = super.call("interestRepaid", "interestRepaid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interestRepaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestRepaid",
      "interestRepaid():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRepaidTimestamp(): BigInt {
    let result = super.call(
      "lastRepaidTimestamp",
      "lastRepaidTimestamp():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastRepaidTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRepaidTimestamp",
      "lastRepaidTimestamp():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  outstandingInterestTillNowWithPF(): BigInt {
    let result = super.call(
      "outstandingInterestTillNowWithPF",
      "outstandingInterestTillNowWithPF():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_outstandingInterestTillNowWithPF(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "outstandingInterestTillNowWithPF",
      "outstandingInterestTillNowWithPF():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  outstandingPrincipal(): BigInt {
    let result = super.call(
      "outstandingPrincipal",
      "outstandingPrincipal():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_outstandingPrincipal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "outstandingPrincipal",
      "outstandingPrincipal():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  overduePrincipalAmount(): BigInt {
    let result = super.call(
      "overduePrincipalAmount",
      "overduePrincipalAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_overduePrincipalAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "overduePrincipalAmount",
      "overduePrincipalAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  performanceFee(): BigInt {
    let result = super.call("performanceFee", "performanceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_performanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceFee",
      "performanceFee():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  period(): BigInt {
    let result = super.call("period", "period():(uint256)", []);

    return result[0].toBigInt();
  }

  try_period(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("period", "period():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principal(): BigInt {
    let result = super.call("principal", "principal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_principal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("principal", "principal():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalRepaid(): BigInt {
    let result = super.call(
      "principalRepaid",
      "principalRepaid():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_principalRepaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalRepaid",
      "principalRepaid():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  self(): Address {
    let result = super.call("self", "self():(address)", []);

    return result[0].toAddress();
  }

  try_self(): ethereum.CallResult<Address> {
    let result = super.tryCall("self", "self():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  suppliedCurrency(): BigInt {
    let result = super.call(
      "suppliedCurrency",
      "suppliedCurrency():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_suppliedCurrency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "suppliedCurrency",
      "suppliedCurrency():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenSupply(): BigInt {
    let result = super.call("tokenSupply", "tokenSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenSupply", "tokenSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDaysRepaid(): BigInt {
    let result = super.call(
      "totalDaysRepaid",
      "totalDaysRepaid():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalDaysRepaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDaysRepaid",
      "totalDaysRepaid():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currency_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DependCall extends ethereum.Call {
  get inputs(): DependCall__Inputs {
    return new DependCall__Inputs(this);
  }

  get outputs(): DependCall__Outputs {
    return new DependCall__Outputs(this);
  }
}

export class DependCall__Inputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }

  get contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DependCall__Outputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }
}

export class Erc20TransferCall extends ethereum.Call {
  get inputs(): Erc20TransferCall__Inputs {
    return new Erc20TransferCall__Inputs(this);
  }

  get outputs(): Erc20TransferCall__Outputs {
    return new Erc20TransferCall__Outputs(this);
  }
}

export class Erc20TransferCall__Inputs {
  _call: Erc20TransferCall;

  constructor(call: Erc20TransferCall) {
    this._call = call;
  }

  get erc20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get usr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Erc20TransferCall__Outputs {
  _call: Erc20TransferCall;

  constructor(call: Erc20TransferCall) {
    this._call = call;
  }
}

export class FileCall extends ethereum.Call {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get principalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get prePaymentPrincipalAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class SupplyCall extends ethereum.Call {
  get inputs(): SupplyCall__Inputs {
    return new SupplyCall__Inputs(this);
  }

  get outputs(): SupplyCall__Outputs {
    return new SupplyCall__Outputs(this);
  }
}

export class SupplyCall__Inputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SupplyCall__Outputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }
}
