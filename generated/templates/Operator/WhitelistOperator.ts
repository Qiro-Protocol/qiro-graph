// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deny extends ethereum.Event {
  get params(): Deny__Params {
    return new Deny__Params(this);
  }
}

export class Deny__Params {
  _event: Deny;

  constructor(event: Deny) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tranche(): string {
    return this._event.parameters[1].value.toString();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalPoolBalance(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get juniorPoolBalance(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get seniorPoolBalance(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Rely extends ethereum.Event {
  get params(): Rely__Params {
    return new Rely__Params(this);
  }
}

export class Rely__Params {
  _event: Rely;

  constructor(event: Rely) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Supply extends ethereum.Event {
  get params(): Supply__Params {
    return new Supply__Params(this);
  }
}

export class Supply__Params {
  _event: Supply;

  constructor(event: Supply) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tranche(): string {
    return this._event.parameters[1].value.toString();
  }

  get supplier(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalPoolBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get juniorPoolBalance(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get seniorPoolBalance(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WhitelistedInvestor extends ethereum.Event {
  get params(): WhitelistedInvestor__Params {
    return new WhitelistedInvestor__Params(this);
  }
}

export class WhitelistedInvestor__Params {
  _event: WhitelistedInvestor;

  constructor(event: WhitelistedInvestor) {
    this._event = event;
  }

  get investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class WhitelistOperator extends ethereum.SmartContract {
  static bind(address: Address): WhitelistOperator {
    return new WhitelistOperator("WhitelistOperator", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  assessor(): Address {
    let result = super.call("assessor", "assessor():(address)", []);

    return result[0].toAddress();
  }

  try_assessor(): ethereum.CallResult<Address> {
    let result = super.tryCall("assessor", "assessor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcMaxRedeemToken(usr: Address): BigInt {
    let result = super.call(
      "calcMaxRedeemToken",
      "calcMaxRedeemToken(address):(uint256)",
      [ethereum.Value.fromAddress(usr)],
    );

    return result[0].toBigInt();
  }

  try_calcMaxRedeemToken(usr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcMaxRedeemToken",
      "calcMaxRedeemToken(address):(uint256)",
      [ethereum.Value.fromAddress(usr)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  capitalFormationEnd(): BigInt {
    let result = super.call(
      "capitalFormationEnd",
      "capitalFormationEnd():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_capitalFormationEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "capitalFormationEnd",
      "capitalFormationEnd():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  capitalFormationPeriod(): BigInt {
    let result = super.call(
      "capitalFormationPeriod",
      "capitalFormationPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_capitalFormationPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "capitalFormationPeriod",
      "capitalFormationPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToAssets(shares: BigInt): BigInt {
    let result = super.call(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );

    return result[0].toBigInt();
  }

  try_convertToAssets(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(assets: BigInt): BigInt {
    let result = super.call(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );

    return result[0].toBigInt();
  }

  try_convertToShares(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currency(): Address {
    let result = super.call("currency", "currency():(address)", []);

    return result[0].toAddress();
  }

  try_currency(): ethereum.CallResult<Address> {
    let result = super.tryCall("currency", "currency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currencyRedeemed(param0: Address): BigInt {
    let result = super.call(
      "currencyRedeemed",
      "currencyRedeemed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_currencyRedeemed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currencyRedeemed",
      "currencyRedeemed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  current(): BigInt {
    let result = super.call("current", "current():(uint256)", []);

    return result[0].toBigInt();
  }

  try_current(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("current", "current():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  deposit(assets: BigInt, receiver: Address): BigInt {
    let result = super.call("deposit", "deposit(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_deposit(assets: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributor(): Address {
    let result = super.call("distributor", "distributor():(address)", []);

    return result[0].toAddress();
  }

  try_distributor(): ethereum.CallResult<Address> {
    let result = super.tryCall("distributor", "distributor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentState(): i32 {
    let result = super.call("getCurrentState", "getCurrentState():(uint8)", []);

    return result[0].toI32();
  }

  try_getCurrentState(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getCurrentState",
      "getCurrentState():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  junior(): Address {
    let result = super.call("junior", "junior():(address)", []);

    return result[0].toAddress();
  }

  try_junior(): ethereum.CallResult<Address> {
    let result = super.tryCall("junior", "junior():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  juniorInvestors(param0: Address): BigInt {
    let result = super.call(
      "juniorInvestors",
      "juniorInvestors(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_juniorInvestors(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "juniorInvestors",
      "juniorInvestors(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  juniorTrancheCeiling(): BigInt {
    let result = super.call(
      "juniorTrancheCeiling",
      "juniorTrancheCeiling():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_juniorTrancheCeiling(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "juniorTrancheCeiling",
      "juniorTrancheCeiling():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxDeposit(param0: Address): BigInt {
    let result = super.call("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_maxDeposit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMint(param0: Address): BigInt {
    let result = super.call("maxMint", "maxMint(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_maxMint(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxMint", "maxMint(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeem(owner: Address): BigInt {
    let result = super.call("maxRedeem", "maxRedeem(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_maxRedeem(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxRedeem", "maxRedeem(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWithdraw(owner: Address): BigInt {
    let result = super.call("maxWithdraw", "maxWithdraw(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_maxWithdraw(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWithdraw",
      "maxWithdraw(address):(uint256)",
      [ethereum.Value.fromAddress(owner)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(shares: BigInt, receiver: Address): BigInt {
    let result = super.call("mint", "mint(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_mint(shares: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  poolId(): BigInt {
    let result = super.call("poolId", "poolId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolId", "poolId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewDeposit(assets: BigInt): BigInt {
    let result = super.call(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );

    return result[0].toBigInt();
  }

  try_previewDeposit(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewMint(shares: BigInt): BigInt {
    let result = super.call("previewMint", "previewMint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
    ]);

    return result[0].toBigInt();
  }

  try_previewMint(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewMint",
      "previewMint(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewRedeem(shares: BigInt): BigInt {
    let result = super.call(
      "previewRedeem",
      "previewRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );

    return result[0].toBigInt();
  }

  try_previewRedeem(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewRedeem",
      "previewRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewWithdraw(assets: BigInt): BigInt {
    let result = super.call(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );

    return result[0].toBigInt();
  }

  try_previewWithdraw(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalRedeemed(param0: Address): BigInt {
    let result = super.call(
      "principalRedeemed",
      "principalRedeemed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_principalRedeemed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalRedeemed",
      "principalRedeemed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rdiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rdiv", "rdiv(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_rdiv(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rdiv", "rdiv(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(shares: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call(
      "redeem",
      "redeem(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
      ],
    );

    return result[0].toBigInt();
  }

  try_redeem(
    shares: BigInt,
    receiver: Address,
    owner: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeem",
      "redeem(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemSenior(tokenAmount: BigInt): BigInt {
    let result = super.call("redeemSenior", "redeemSenior(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenAmount),
    ]);

    return result[0].toBigInt();
  }

  try_redeemSenior(tokenAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemSenior",
      "redeemSenior(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenAmount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rmul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("rmul", "rmul(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_rmul(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rmul", "rmul(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeAdd(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeAdd", "safeAdd(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeAdd(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeAdd",
      "safeAdd(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeDiv(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeDiv", "safeDiv(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeDiv(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeDiv",
      "safeDiv(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeMul(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeMul", "safeMul(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeMul(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeMul",
      "safeMul(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  safeSub(x: BigInt, y: BigInt): BigInt {
    let result = super.call("safeSub", "safeSub(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(x),
      ethereum.Value.fromUnsignedBigInt(y),
    ]);

    return result[0].toBigInt();
  }

  try_safeSub(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeSub",
      "safeSub(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(x),
        ethereum.Value.fromUnsignedBigInt(y),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  senior(): Address {
    let result = super.call("senior", "senior():(address)", []);

    return result[0].toAddress();
  }

  try_senior(): ethereum.CallResult<Address> {
    let result = super.tryCall("senior", "senior():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  seniorInvestors(param0: Address): BigInt {
    let result = super.call(
      "seniorInvestors",
      "seniorInvestors(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_seniorInvestors(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seniorInvestors",
      "seniorInvestors(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seniorToken(): Address {
    let result = super.call("seniorToken", "seniorToken():(address)", []);

    return result[0].toAddress();
  }

  try_seniorToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("seniorToken", "seniorToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  seniorTrancheCeiling(): BigInt {
    let result = super.call(
      "seniorTrancheCeiling",
      "seniorTrancheCeiling():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_seniorTrancheCeiling(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seniorTrancheCeiling",
      "seniorTrancheCeiling():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shelf(): Address {
    let result = super.call("shelf", "shelf():(address)", []);

    return result[0].toAddress();
  }

  try_shelf(): ethereum.CallResult<Address> {
    let result = super.tryCall("shelf", "shelf():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  state(): i32 {
    let result = super.call("state", "state():(uint8)", []);

    return result[0].toI32();
  }

  try_state(): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supplyAllowed(): boolean {
    let result = super.call("supplyAllowed", "supplyAllowed():(bool)", []);

    return result[0].toBoolean();
  }

  try_supplyAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("supplyAllowed", "supplyAllowed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  threshold(): BigInt {
    let result = super.call("threshold", "threshold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_threshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("threshold", "threshold():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenReceived(param0: Address): BigInt {
    let result = super.call(
      "tokenReceived",
      "tokenReceived(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_tokenReceived(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenReceived",
      "tokenReceived(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenRedeemed(param0: Address): BigInt {
    let result = super.call(
      "tokenRedeemed",
      "tokenRedeemed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_tokenRedeemed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenRedeemed",
      "tokenRedeemed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalCurrencyReturned(): BigInt {
    let result = super.call(
      "totalCurrencyReturned",
      "totalCurrencyReturned():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalCurrencyReturned(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCurrencyReturned",
      "totalCurrencyReturned():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPrincipalReturned(): BigInt {
    let result = super.call(
      "totalPrincipalReturned",
      "totalPrincipalReturned():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalPrincipalReturned(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrincipalReturned",
      "totalPrincipalReturned():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(assets: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
      ],
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    assets: BigInt,
    receiver: Address,
    owner: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get junior_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get senior_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assessor_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get distributor_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _capitalFormationPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CalcMaxRedeemTokenCall extends ethereum.Call {
  get inputs(): CalcMaxRedeemTokenCall__Inputs {
    return new CalcMaxRedeemTokenCall__Inputs(this);
  }

  get outputs(): CalcMaxRedeemTokenCall__Outputs {
    return new CalcMaxRedeemTokenCall__Outputs(this);
  }
}

export class CalcMaxRedeemTokenCall__Inputs {
  _call: CalcMaxRedeemTokenCall;

  constructor(call: CalcMaxRedeemTokenCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CalcMaxRedeemTokenCall__Outputs {
  _call: CalcMaxRedeemTokenCall;

  constructor(call: CalcMaxRedeemTokenCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DenyInvestorCall extends ethereum.Call {
  get inputs(): DenyInvestorCall__Inputs {
    return new DenyInvestorCall__Inputs(this);
  }

  get outputs(): DenyInvestorCall__Outputs {
    return new DenyInvestorCall__Outputs(this);
  }
}

export class DenyInvestorCall__Inputs {
  _call: DenyInvestorCall;

  constructor(call: DenyInvestorCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __tranche(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class DenyInvestorCall__Outputs {
  _call: DenyInvestorCall;

  constructor(call: DenyInvestorCall) {
    this._call = call;
  }
}

export class DependCall extends ethereum.Call {
  get inputs(): DependCall__Inputs {
    return new DependCall__Inputs(this);
  }

  get outputs(): DependCall__Outputs {
    return new DependCall__Outputs(this);
  }
}

export class DependCall__Inputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }

  get contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DependCall__Outputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FileCall extends ethereum.Call {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get usr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenReceived_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenRedeemed_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get currencyRedeemed_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get principalRedeemed_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class GetCurrentStateCall extends ethereum.Call {
  get inputs(): GetCurrentStateCall__Inputs {
    return new GetCurrentStateCall__Inputs(this);
  }

  get outputs(): GetCurrentStateCall__Outputs {
    return new GetCurrentStateCall__Outputs(this);
  }
}

export class GetCurrentStateCall__Inputs {
  _call: GetCurrentStateCall;

  constructor(call: GetCurrentStateCall) {
    this._call = call;
  }
}

export class GetCurrentStateCall__Outputs {
  _call: GetCurrentStateCall;

  constructor(call: GetCurrentStateCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemJuniorCall extends ethereum.Call {
  get inputs(): RedeemJuniorCall__Inputs {
    return new RedeemJuniorCall__Inputs(this);
  }

  get outputs(): RedeemJuniorCall__Outputs {
    return new RedeemJuniorCall__Outputs(this);
  }
}

export class RedeemJuniorCall__Inputs {
  _call: RedeemJuniorCall;

  constructor(call: RedeemJuniorCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemJuniorCall__Outputs {
  _call: RedeemJuniorCall;

  constructor(call: RedeemJuniorCall) {
    this._call = call;
  }
}

export class RedeemSeniorCall extends ethereum.Call {
  get inputs(): RedeemSeniorCall__Inputs {
    return new RedeemSeniorCall__Inputs(this);
  }

  get outputs(): RedeemSeniorCall__Outputs {
    return new RedeemSeniorCall__Outputs(this);
  }
}

export class RedeemSeniorCall__Inputs {
  _call: RedeemSeniorCall;

  constructor(call: RedeemSeniorCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemSeniorCall__Outputs {
  _call: RedeemSeniorCall;

  constructor(call: RedeemSeniorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class RelyInvestorCall extends ethereum.Call {
  get inputs(): RelyInvestorCall__Inputs {
    return new RelyInvestorCall__Inputs(this);
  }

  get outputs(): RelyInvestorCall__Outputs {
    return new RelyInvestorCall__Outputs(this);
  }
}

export class RelyInvestorCall__Inputs {
  _call: RelyInvestorCall;

  constructor(call: RelyInvestorCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __tranche(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RelyInvestorCall__Outputs {
  _call: RelyInvestorCall;

  constructor(call: RelyInvestorCall) {
    this._call = call;
  }
}

export class SetThresholdCall extends ethereum.Call {
  get inputs(): SetThresholdCall__Inputs {
    return new SetThresholdCall__Inputs(this);
  }

  get outputs(): SetThresholdCall__Outputs {
    return new SetThresholdCall__Outputs(this);
  }
}

export class SetThresholdCall__Inputs {
  _call: SetThresholdCall;

  constructor(call: SetThresholdCall) {
    this._call = call;
  }

  get _threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetThresholdCall__Outputs {
  _call: SetThresholdCall;

  constructor(call: SetThresholdCall) {
    this._call = call;
  }
}

export class SetTrancheCelingsCall extends ethereum.Call {
  get inputs(): SetTrancheCelingsCall__Inputs {
    return new SetTrancheCelingsCall__Inputs(this);
  }

  get outputs(): SetTrancheCelingsCall__Outputs {
    return new SetTrancheCelingsCall__Outputs(this);
  }
}

export class SetTrancheCelingsCall__Inputs {
  _call: SetTrancheCelingsCall;

  constructor(call: SetTrancheCelingsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tranche(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTrancheCelingsCall__Outputs {
  _call: SetTrancheCelingsCall;

  constructor(call: SetTrancheCelingsCall) {
    this._call = call;
  }
}

export class SupplyCall extends ethereum.Call {
  get inputs(): SupplyCall__Inputs {
    return new SupplyCall__Inputs(this);
  }

  get outputs(): SupplyCall__Outputs {
    return new SupplyCall__Outputs(this);
  }
}

export class SupplyCall__Inputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyCall__Outputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }
}

export class SupplyJuniorCall extends ethereum.Call {
  get inputs(): SupplyJuniorCall__Inputs {
    return new SupplyJuniorCall__Inputs(this);
  }

  get outputs(): SupplyJuniorCall__Outputs {
    return new SupplyJuniorCall__Outputs(this);
  }
}

export class SupplyJuniorCall__Inputs {
  _call: SupplyJuniorCall;

  constructor(call: SupplyJuniorCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyJuniorCall__Outputs {
  _call: SupplyJuniorCall;

  constructor(call: SupplyJuniorCall) {
    this._call = call;
  }
}

export class SupplySeniorCall extends ethereum.Call {
  get inputs(): SupplySeniorCall__Inputs {
    return new SupplySeniorCall__Inputs(this);
  }

  get outputs(): SupplySeniorCall__Outputs {
    return new SupplySeniorCall__Outputs(this);
  }
}

export class SupplySeniorCall__Inputs {
  _call: SupplySeniorCall;

  constructor(call: SupplySeniorCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SupplySeniorCall__Outputs {
  _call: SupplySeniorCall;

  constructor(call: SupplySeniorCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateStateCall extends ethereum.Call {
  get inputs(): UpdateStateCall__Inputs {
    return new UpdateStateCall__Inputs(this);
  }

  get outputs(): UpdateStateCall__Outputs {
    return new UpdateStateCall__Outputs(this);
  }
}

export class UpdateStateCall__Inputs {
  _call: UpdateStateCall;

  constructor(call: UpdateStateCall) {
    this._call = call;
  }
}

export class UpdateStateCall__Outputs {
  _call: UpdateStateCall;

  constructor(call: UpdateStateCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
