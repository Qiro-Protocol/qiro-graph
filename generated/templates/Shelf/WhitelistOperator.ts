// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Deny extends ethereum.Event {
  get params(): Deny__Params {
    return new Deny__Params(this);
  }
}

export class Deny__Params {
  _event: Deny;

  constructor(event: Deny) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Rely extends ethereum.Event {
  get params(): Rely__Params {
    return new Rely__Params(this);
  }
}

export class Rely__Params {
  _event: Rely;

  constructor(event: Rely) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Supply extends ethereum.Event {
  get params(): Supply__Params {
    return new Supply__Params(this);
  }
}

export class Supply__Params {
  _event: Supply;

  constructor(event: Supply) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedPoolState extends ethereum.Event {
  get params(): UpdatedPoolState__Params {
    return new UpdatedPoolState__Params(this);
  }
}

export class UpdatedPoolState__Params {
  _event: UpdatedPoolState;

  constructor(event: UpdatedPoolState) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get state(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class WhitelistedInvestor extends ethereum.Event {
  get params(): WhitelistedInvestor__Params {
    return new WhitelistedInvestor__Params(this);
  }
}

export class WhitelistedInvestor__Params {
  _event: WhitelistedInvestor;

  constructor(event: WhitelistedInvestor) {
    this._event = event;
  }

  get investor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WhitelistOperator extends ethereum.SmartContract {
  static bind(address: Address): WhitelistOperator {
    return new WhitelistOperator("WhitelistOperator", address);
  }

  JUNIOR(): Bytes {
    let result = super.call("JUNIOR", "JUNIOR():(bytes32)", []);

    return result[0].toBytes();
  }

  try_JUNIOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("JUNIOR", "JUNIOR():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SENIOR(): Bytes {
    let result = super.call("SENIOR", "SENIOR():(bytes32)", []);

    return result[0].toBytes();
  }

  try_SENIOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("SENIOR", "SENIOR():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  assessor(): Address {
    let result = super.call("assessor", "assessor():(address)", []);

    return result[0].toAddress();
  }

  try_assessor(): ethereum.CallResult<Address> {
    let result = super.tryCall("assessor", "assessor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  capitalFormationEnd(): BigInt {
    let result = super.call(
      "capitalFormationEnd",
      "capitalFormationEnd():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_capitalFormationEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "capitalFormationEnd",
      "capitalFormationEnd():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  capitalFormationPeriod(): BigInt {
    let result = super.call(
      "capitalFormationPeriod",
      "capitalFormationPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_capitalFormationPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "capitalFormationPeriod",
      "capitalFormationPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currency(): Address {
    let result = super.call("currency", "currency():(address)", []);

    return result[0].toAddress();
  }

  try_currency(): ethereum.CallResult<Address> {
    let result = super.tryCall("currency", "currency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currencyRedeemedJunior(param0: Address): BigInt {
    let result = super.call(
      "currencyRedeemedJunior",
      "currencyRedeemedJunior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_currencyRedeemedJunior(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currencyRedeemedJunior",
      "currencyRedeemedJunior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currencyRedeemedSenior(param0: Address): BigInt {
    let result = super.call(
      "currencyRedeemedSenior",
      "currencyRedeemedSenior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_currencyRedeemedSenior(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currencyRedeemedSenior",
      "currencyRedeemedSenior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  current(): BigInt {
    let result = super.call("current", "current():(uint256)", []);

    return result[0].toBigInt();
  }

  try_current(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("current", "current():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributor(): Address {
    let result = super.call("distributor", "distributor():(address)", []);

    return result[0].toAddress();
  }

  try_distributor(): ethereum.CallResult<Address> {
    let result = super.tryCall("distributor", "distributor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentState(): i32 {
    let result = super.call("getCurrentState", "getCurrentState():(uint8)", []);

    return result[0].toI32();
  }

  try_getCurrentState(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getCurrentState",
      "getCurrentState():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getState(): BigInt {
    let result = super.call("getState", "getState():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getState(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getState", "getState():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  investmentOperator(): Address {
    let result = super.call(
      "investmentOperator",
      "investmentOperator():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_investmentOperator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "investmentOperator",
      "investmentOperator():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  junior(): Address {
    let result = super.call("junior", "junior():(address)", []);

    return result[0].toAddress();
  }

  try_junior(): ethereum.CallResult<Address> {
    let result = super.tryCall("junior", "junior():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  juniorInvestors(param0: Address): BigInt {
    let result = super.call(
      "juniorInvestors",
      "juniorInvestors(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_juniorInvestors(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "juniorInvestors",
      "juniorInvestors(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  juniorToken(): Address {
    let result = super.call("juniorToken", "juniorToken():(address)", []);

    return result[0].toAddress();
  }

  try_juniorToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("juniorToken", "juniorToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  juniorTrancheCeiling(): BigInt {
    let result = super.call(
      "juniorTrancheCeiling",
      "juniorTrancheCeiling():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_juniorTrancheCeiling(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "juniorTrancheCeiling",
      "juniorTrancheCeiling():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolId(): BigInt {
    let result = super.call("poolId", "poolId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolId", "poolId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolType(): i32 {
    let result = super.call("poolType", "poolType():(uint8)", []);

    return result[0].toI32();
  }

  try_poolType(): ethereum.CallResult<i32> {
    let result = super.tryCall("poolType", "poolType():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  principalRedeemedJunior(param0: Address): BigInt {
    let result = super.call(
      "principalRedeemedJunior",
      "principalRedeemedJunior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_principalRedeemedJunior(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalRedeemedJunior",
      "principalRedeemedJunior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalRedeemedSenior(param0: Address): BigInt {
    let result = super.call(
      "principalRedeemedSenior",
      "principalRedeemedSenior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_principalRedeemedSenior(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalRedeemedSenior",
      "principalRedeemedSenior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  qiroFactory(): Address {
    let result = super.call("qiroFactory", "qiroFactory():(address)", []);

    return result[0].toAddress();
  }

  try_qiroFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("qiroFactory", "qiroFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  senior(): Address {
    let result = super.call("senior", "senior():(address)", []);

    return result[0].toAddress();
  }

  try_senior(): ethereum.CallResult<Address> {
    let result = super.tryCall("senior", "senior():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  seniorInvestors(param0: Address): BigInt {
    let result = super.call(
      "seniorInvestors",
      "seniorInvestors(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_seniorInvestors(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seniorInvestors",
      "seniorInvestors(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seniorToken(): Address {
    let result = super.call("seniorToken", "seniorToken():(address)", []);

    return result[0].toAddress();
  }

  try_seniorToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("seniorToken", "seniorToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  seniorTrancheCeiling(): BigInt {
    let result = super.call(
      "seniorTrancheCeiling",
      "seniorTrancheCeiling():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_seniorTrancheCeiling(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seniorTrancheCeiling",
      "seniorTrancheCeiling():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shelf(): Address {
    let result = super.call("shelf", "shelf():(address)", []);

    return result[0].toAddress();
  }

  try_shelf(): ethereum.CallResult<Address> {
    let result = super.tryCall("shelf", "shelf():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  state(): i32 {
    let result = super.call("state", "state():(uint8)", []);

    return result[0].toI32();
  }

  try_state(): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supplyAllowed(): boolean {
    let result = super.call("supplyAllowed", "supplyAllowed():(bool)", []);

    return result[0].toBoolean();
  }

  try_supplyAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("supplyAllowed", "supplyAllowed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  threshold(): BigInt {
    let result = super.call("threshold", "threshold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_threshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("threshold", "threshold():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenReceivedJunior(param0: Address): BigInt {
    let result = super.call(
      "tokenReceivedJunior",
      "tokenReceivedJunior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_tokenReceivedJunior(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenReceivedJunior",
      "tokenReceivedJunior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenReceivedSenior(param0: Address): BigInt {
    let result = super.call(
      "tokenReceivedSenior",
      "tokenReceivedSenior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_tokenReceivedSenior(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenReceivedSenior",
      "tokenReceivedSenior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenRedeemedJunior(param0: Address): BigInt {
    let result = super.call(
      "tokenRedeemedJunior",
      "tokenRedeemedJunior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_tokenRedeemedJunior(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenRedeemedJunior",
      "tokenRedeemedJunior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenRedeemedSenior(param0: Address): BigInt {
    let result = super.call(
      "tokenRedeemedSenior",
      "tokenRedeemedSenior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_tokenRedeemedSenior(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenRedeemedSenior",
      "tokenRedeemedSenior(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositCurrencyJunior(): BigInt {
    let result = super.call(
      "totalDepositCurrencyJunior",
      "totalDepositCurrencyJunior():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalDepositCurrencyJunior(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositCurrencyJunior",
      "totalDepositCurrencyJunior():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositCurrencySenior(): BigInt {
    let result = super.call(
      "totalDepositCurrencySenior",
      "totalDepositCurrencySenior():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalDepositCurrencySenior(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositCurrencySenior",
      "totalDepositCurrencySenior():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRedeemedCurrencyJunior(): BigInt {
    let result = super.call(
      "totalRedeemedCurrencyJunior",
      "totalRedeemedCurrencyJunior():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalRedeemedCurrencyJunior(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRedeemedCurrencyJunior",
      "totalRedeemedCurrencyJunior():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRedeemedCurrencySenior(): BigInt {
    let result = super.call(
      "totalRedeemedCurrencySenior",
      "totalRedeemedCurrencySenior():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalRedeemedCurrencySenior(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRedeemedCurrencySenior",
      "totalRedeemedCurrencySenior():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRedeemedTokensJunior(): BigInt {
    let result = super.call(
      "totalRedeemedTokensJunior",
      "totalRedeemedTokensJunior():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalRedeemedTokensJunior(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRedeemedTokensJunior",
      "totalRedeemedTokensJunior():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRedeemedTokensSenior(): BigInt {
    let result = super.call(
      "totalRedeemedTokensSenior",
      "totalRedeemedTokensSenior():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalRedeemedTokensSenior(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRedeemedTokensSenior",
      "totalRedeemedTokensSenior():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get junior_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get senior_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assessor_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get distributor_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _capitalFormationPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get qiroFactory_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get poolType_(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DenyInvestorCall extends ethereum.Call {
  get inputs(): DenyInvestorCall__Inputs {
    return new DenyInvestorCall__Inputs(this);
  }

  get outputs(): DenyInvestorCall__Outputs {
    return new DenyInvestorCall__Outputs(this);
  }
}

export class DenyInvestorCall__Inputs {
  _call: DenyInvestorCall;

  constructor(call: DenyInvestorCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __tranche(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class DenyInvestorCall__Outputs {
  _call: DenyInvestorCall;

  constructor(call: DenyInvestorCall) {
    this._call = call;
  }
}

export class DependCall extends ethereum.Call {
  get inputs(): DependCall__Inputs {
    return new DependCall__Inputs(this);
  }

  get outputs(): DependCall__Outputs {
    return new DependCall__Outputs(this);
  }
}

export class DependCall__Inputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }

  get contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DependCall__Outputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }
}

export class ExecuteSupplyCall extends ethereum.Call {
  get inputs(): ExecuteSupplyCall__Inputs {
    return new ExecuteSupplyCall__Inputs(this);
  }

  get outputs(): ExecuteSupplyCall__Outputs {
    return new ExecuteSupplyCall__Outputs(this);
  }
}

export class ExecuteSupplyCall__Inputs {
  _call: ExecuteSupplyCall;

  constructor(call: ExecuteSupplyCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tranche(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ExecuteSupplyCall__Outputs {
  _call: ExecuteSupplyCall;

  constructor(call: ExecuteSupplyCall) {
    this._call = call;
  }
}

export class GetCurrentStateCall extends ethereum.Call {
  get inputs(): GetCurrentStateCall__Inputs {
    return new GetCurrentStateCall__Inputs(this);
  }

  get outputs(): GetCurrentStateCall__Outputs {
    return new GetCurrentStateCall__Outputs(this);
  }
}

export class GetCurrentStateCall__Inputs {
  _call: GetCurrentStateCall;

  constructor(call: GetCurrentStateCall) {
    this._call = call;
  }
}

export class GetCurrentStateCall__Outputs {
  _call: GetCurrentStateCall;

  constructor(call: GetCurrentStateCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RedeemJuniorCall extends ethereum.Call {
  get inputs(): RedeemJuniorCall__Inputs {
    return new RedeemJuniorCall__Inputs(this);
  }

  get outputs(): RedeemJuniorCall__Outputs {
    return new RedeemJuniorCall__Outputs(this);
  }
}

export class RedeemJuniorCall__Inputs {
  _call: RedeemJuniorCall;

  constructor(call: RedeemJuniorCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemJuniorCall__Outputs {
  _call: RedeemJuniorCall;

  constructor(call: RedeemJuniorCall) {
    this._call = call;
  }
}

export class RedeemSeniorCall extends ethereum.Call {
  get inputs(): RedeemSeniorCall__Inputs {
    return new RedeemSeniorCall__Inputs(this);
  }

  get outputs(): RedeemSeniorCall__Outputs {
    return new RedeemSeniorCall__Outputs(this);
  }
}

export class RedeemSeniorCall__Inputs {
  _call: RedeemSeniorCall;

  constructor(call: RedeemSeniorCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemSeniorCall__Outputs {
  _call: RedeemSeniorCall;

  constructor(call: RedeemSeniorCall) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class RelyInvestorCall extends ethereum.Call {
  get inputs(): RelyInvestorCall__Inputs {
    return new RelyInvestorCall__Inputs(this);
  }

  get outputs(): RelyInvestorCall__Outputs {
    return new RelyInvestorCall__Outputs(this);
  }
}

export class RelyInvestorCall__Inputs {
  _call: RelyInvestorCall;

  constructor(call: RelyInvestorCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __tranche(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RelyInvestorCall__Outputs {
  _call: RelyInvestorCall;

  constructor(call: RelyInvestorCall) {
    this._call = call;
  }
}

export class SetSupplyAllowedCall extends ethereum.Call {
  get inputs(): SetSupplyAllowedCall__Inputs {
    return new SetSupplyAllowedCall__Inputs(this);
  }

  get outputs(): SetSupplyAllowedCall__Outputs {
    return new SetSupplyAllowedCall__Outputs(this);
  }
}

export class SetSupplyAllowedCall__Inputs {
  _call: SetSupplyAllowedCall;

  constructor(call: SetSupplyAllowedCall) {
    this._call = call;
  }

  get allowed(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSupplyAllowedCall__Outputs {
  _call: SetSupplyAllowedCall;

  constructor(call: SetSupplyAllowedCall) {
    this._call = call;
  }
}

export class SetThresholdCall extends ethereum.Call {
  get inputs(): SetThresholdCall__Inputs {
    return new SetThresholdCall__Inputs(this);
  }

  get outputs(): SetThresholdCall__Outputs {
    return new SetThresholdCall__Outputs(this);
  }
}

export class SetThresholdCall__Inputs {
  _call: SetThresholdCall;

  constructor(call: SetThresholdCall) {
    this._call = call;
  }

  get _threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetThresholdCall__Outputs {
  _call: SetThresholdCall;

  constructor(call: SetThresholdCall) {
    this._call = call;
  }
}

export class SetTrancheCeilingsCall extends ethereum.Call {
  get inputs(): SetTrancheCeilingsCall__Inputs {
    return new SetTrancheCeilingsCall__Inputs(this);
  }

  get outputs(): SetTrancheCeilingsCall__Outputs {
    return new SetTrancheCeilingsCall__Outputs(this);
  }
}

export class SetTrancheCeilingsCall__Inputs {
  _call: SetTrancheCeilingsCall;

  constructor(call: SetTrancheCeilingsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tranche(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTrancheCeilingsCall__Outputs {
  _call: SetTrancheCeilingsCall;

  constructor(call: SetTrancheCeilingsCall) {
    this._call = call;
  }
}

export class SupplyCall extends ethereum.Call {
  get inputs(): SupplyCall__Inputs {
    return new SupplyCall__Inputs(this);
  }

  get outputs(): SupplyCall__Outputs {
    return new SupplyCall__Outputs(this);
  }
}

export class SupplyCall__Inputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyCall__Outputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }
}

export class SupplyJuniorCall extends ethereum.Call {
  get inputs(): SupplyJuniorCall__Inputs {
    return new SupplyJuniorCall__Inputs(this);
  }

  get outputs(): SupplyJuniorCall__Outputs {
    return new SupplyJuniorCall__Outputs(this);
  }
}

export class SupplyJuniorCall__Inputs {
  _call: SupplyJuniorCall;

  constructor(call: SupplyJuniorCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyJuniorCall__Outputs {
  _call: SupplyJuniorCall;

  constructor(call: SupplyJuniorCall) {
    this._call = call;
  }
}

export class SupplySeniorCall extends ethereum.Call {
  get inputs(): SupplySeniorCall__Inputs {
    return new SupplySeniorCall__Inputs(this);
  }

  get outputs(): SupplySeniorCall__Outputs {
    return new SupplySeniorCall__Outputs(this);
  }
}

export class SupplySeniorCall__Inputs {
  _call: SupplySeniorCall;

  constructor(call: SupplySeniorCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SupplySeniorCall__Outputs {
  _call: SupplySeniorCall;

  constructor(call: SupplySeniorCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateCurrentCall extends ethereum.Call {
  get inputs(): UpdateCurrentCall__Inputs {
    return new UpdateCurrentCall__Inputs(this);
  }

  get outputs(): UpdateCurrentCall__Outputs {
    return new UpdateCurrentCall__Outputs(this);
  }
}

export class UpdateCurrentCall__Inputs {
  _call: UpdateCurrentCall;

  constructor(call: UpdateCurrentCall) {
    this._call = call;
  }

  get newCurrent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateCurrentCall__Outputs {
  _call: UpdateCurrentCall;

  constructor(call: UpdateCurrentCall) {
    this._call = call;
  }
}

export class UpdateRedeemedAmountsCall extends ethereum.Call {
  get inputs(): UpdateRedeemedAmountsCall__Inputs {
    return new UpdateRedeemedAmountsCall__Inputs(this);
  }

  get outputs(): UpdateRedeemedAmountsCall__Outputs {
    return new UpdateRedeemedAmountsCall__Outputs(this);
  }
}

export class UpdateRedeemedAmountsCall__Inputs {
  _call: UpdateRedeemedAmountsCall;

  constructor(call: UpdateRedeemedAmountsCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get trancheName(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateRedeemedAmountsCall__Outputs {
  _call: UpdateRedeemedAmountsCall;

  constructor(call: UpdateRedeemedAmountsCall) {
    this._call = call;
  }
}

export class UpdateStateCall extends ethereum.Call {
  get inputs(): UpdateStateCall__Inputs {
    return new UpdateStateCall__Inputs(this);
  }

  get outputs(): UpdateStateCall__Outputs {
    return new UpdateStateCall__Outputs(this);
  }
}

export class UpdateStateCall__Inputs {
  _call: UpdateStateCall;

  constructor(call: UpdateStateCall) {
    this._call = call;
  }
}

export class UpdateStateCall__Outputs {
  _call: UpdateStateCall;

  constructor(call: UpdateStateCall) {
    this._call = call;
  }
}

export class UpdateTokenReceivedCall extends ethereum.Call {
  get inputs(): UpdateTokenReceivedCall__Inputs {
    return new UpdateTokenReceivedCall__Inputs(this);
  }

  get outputs(): UpdateTokenReceivedCall__Outputs {
    return new UpdateTokenReceivedCall__Outputs(this);
  }
}

export class UpdateTokenReceivedCall__Inputs {
  _call: UpdateTokenReceivedCall;

  constructor(call: UpdateTokenReceivedCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isJunior(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateTokenReceivedCall__Outputs {
  _call: UpdateTokenReceivedCall;

  constructor(call: UpdateTokenReceivedCall) {
    this._call = call;
  }
}

export class UpdateTotalDepositedCall extends ethereum.Call {
  get inputs(): UpdateTotalDepositedCall__Inputs {
    return new UpdateTotalDepositedCall__Inputs(this);
  }

  get outputs(): UpdateTotalDepositedCall__Outputs {
    return new UpdateTotalDepositedCall__Outputs(this);
  }
}

export class UpdateTotalDepositedCall__Inputs {
  _call: UpdateTotalDepositedCall;

  constructor(call: UpdateTotalDepositedCall) {
    this._call = call;
  }

  get isJunior(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isDecrease(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateTotalDepositedCall__Outputs {
  _call: UpdateTotalDepositedCall;

  constructor(call: UpdateTotalDepositedCall) {
    this._call = call;
  }
}

export class UpdateTotalRedeemedCall extends ethereum.Call {
  get inputs(): UpdateTotalRedeemedCall__Inputs {
    return new UpdateTotalRedeemedCall__Inputs(this);
  }

  get outputs(): UpdateTotalRedeemedCall__Outputs {
    return new UpdateTotalRedeemedCall__Outputs(this);
  }
}

export class UpdateTotalRedeemedCall__Inputs {
  _call: UpdateTotalRedeemedCall;

  constructor(call: UpdateTotalRedeemedCall) {
    this._call = call;
  }

  get isJunior(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateTotalRedeemedCall__Outputs {
  _call: UpdateTotalRedeemedCall;

  constructor(call: UpdateTotalRedeemedCall) {
    this._call = call;
  }
}
