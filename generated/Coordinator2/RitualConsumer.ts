// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Deny extends ethereum.Event {
  get params(): Deny__Params {
    return new Deny__Params(this);
  }
}

export class Deny__Params {
  _event: Deny;

  constructor(event: Deny) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Rely extends ethereum.Event {
  get params(): Rely__Params {
    return new Rely__Params(this);
  }
}

export class Rely__Params {
  _event: Rely;

  constructor(event: Rely) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RitualConsumer__subIdToAggregatedResultResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getPushInferenceAvgToNftContract(): boolean {
    return this.value0;
  }

  getResponseCount(): BigInt {
    return this.value1;
  }

  getRequestedCount(): BigInt {
    return this.value2;
  }

  getFulfilled(): boolean {
    return this.value3;
  }
}

export class RitualConsumer__subIdToAllInferencesResult {
  value0: BigInt;
  value1: Address;
  value2: Bytes;

  constructor(value0: BigInt, value1: Address, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    return map;
  }

  getInterval(): BigInt {
    return this.value0;
  }

  getNode(): Address {
    return this.value1;
  }

  getContainerId(): Bytes {
    return this.value2;
  }
}

export class RitualConsumer extends ethereum.SmartContract {
  static bind(address: Address): RitualConsumer {
    return new RitualConsumer("RitualConsumer", address);
  }

  computeResponsePendingSubId(): BigInt {
    let result = super.call(
      "computeResponsePendingSubId",
      "computeResponsePendingSubId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_computeResponsePendingSubId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeResponsePendingSubId",
      "computeResponsePendingSubId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContainerInputs(
    subscriptionId: BigInt,
    interval: BigInt,
    timestamp: BigInt,
    caller: Address,
  ): Bytes {
    let result = super.call(
      "getContainerInputs",
      "getContainerInputs(uint32,uint32,uint32,address):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(subscriptionId),
        ethereum.Value.fromUnsignedBigInt(interval),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromAddress(caller),
      ],
    );

    return result[0].toBytes();
  }

  try_getContainerInputs(
    subscriptionId: BigInt,
    interval: BigInt,
    timestamp: BigInt,
    caller: Address,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getContainerInputs",
      "getContainerInputs(uint32,uint32,uint32,address):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(subscriptionId),
        ethereum.Value.fromUnsignedBigInt(interval),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromAddress(caller),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getResponseFromSubIdAndNode(subid: BigInt, node: Address): Array<BigInt> {
    let result = super.call(
      "getResponseFromSubIdAndNode",
      "getResponseFromSubIdAndNode(uint32,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(subid),
        ethereum.Value.fromAddress(node),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getResponseFromSubIdAndNode(
    subid: BigInt,
    node: Address,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getResponseFromSubIdAndNode",
      "getResponseFromSubIdAndNode(uint32,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(subid),
        ethereum.Value.fromAddress(node),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  hasDeliveredCompute(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "hasDeliveredCompute",
      "hasDeliveredCompute(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBoolean();
  }

  try_hasDeliveredCompute(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasDeliveredCompute",
      "hasDeliveredCompute(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isComputeResponsePending(): boolean {
    let result = super.call(
      "isComputeResponsePending",
      "isComputeResponsePending():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_isComputeResponsePending(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isComputeResponsePending",
      "isComputeResponsePending():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isProofVerified(param0: Bytes): boolean {
    let result = super.call(
      "isProofVerified",
      "isProofVerified(bytes):(bool)",
      [ethereum.Value.fromBytes(param0)],
    );

    return result[0].toBoolean();
  }

  try_isProofVerified(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isProofVerified",
      "isProofVerified(bytes):(bool)",
      [ethereum.Value.fromBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWindowOpen(param0: BigInt): boolean {
    let result = super.call("isWindowOpen", "isWindowOpen(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isWindowOpen(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isWindowOpen", "isWindowOpen(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastUpdatedTimestamp(): BigInt {
    let result = super.call(
      "lastUpdatedTimestamp",
      "lastUpdatedTimestamp():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastUpdatedTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdatedTimestamp",
      "lastUpdatedTimestamp():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nft(): Address {
    let result = super.call("nft", "nft():(address)", []);

    return result[0].toAddress();
  }

  try_nft(): ethereum.CallResult<Address> {
    let result = super.tryCall("nft", "nft():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nodeWeights(param0: Address): BigInt {
    let result = super.call("nodeWeights", "nodeWeights(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nodeWeights(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nodeWeights",
      "nodeWeights(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proofFileArweaveTxn(param0: Bytes): string {
    let result = super.call(
      "proofFileArweaveTxn",
      "proofFileArweaveTxn(bytes):(string)",
      [ethereum.Value.fromBytes(param0)],
    );

    return result[0].toString();
  }

  try_proofFileArweaveTxn(param0: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "proofFileArweaveTxn",
      "proofFileArweaveTxn(bytes):(string)",
      [ethereum.Value.fromBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  requestCompute(
    model: string,
    inputs: Bytes,
    redundancy: i32,
    paymentToken: Address,
    paymentAmount: BigInt,
    wallet: Address,
    verifier: Address,
    tokenId: BigInt,
    pushInferenceAvgToNftContract: boolean,
  ): BigInt {
    let result = super.call(
      "requestCompute",
      "requestCompute(string,bytes,uint16,address,uint256,address,address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromString(model),
        ethereum.Value.fromBytes(inputs),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(redundancy)),
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromUnsignedBigInt(paymentAmount),
        ethereum.Value.fromAddress(wallet),
        ethereum.Value.fromAddress(verifier),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBoolean(pushInferenceAvgToNftContract),
      ],
    );

    return result[0].toBigInt();
  }

  try_requestCompute(
    model: string,
    inputs: Bytes,
    redundancy: i32,
    paymentToken: Address,
    paymentAmount: BigInt,
    wallet: Address,
    verifier: Address,
    tokenId: BigInt,
    pushInferenceAvgToNftContract: boolean,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestCompute",
      "requestCompute(string,bytes,uint16,address,uint256,address,address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromString(model),
        ethereum.Value.fromBytes(inputs),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(redundancy)),
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromUnsignedBigInt(paymentAmount),
        ethereum.Value.fromAddress(wallet),
        ethereum.Value.fromAddress(verifier),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBoolean(pushInferenceAvgToNftContract),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  responsesOfWindow(param0: BigInt): Bytes {
    let result = super.call(
      "responsesOfWindow",
      "responsesOfWindow(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBytes();
  }

  try_responsesOfWindow(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "responsesOfWindow",
      "responsesOfWindow(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  subIdToAggregatedResult(
    param0: BigInt,
  ): RitualConsumer__subIdToAggregatedResultResult {
    let result = super.call(
      "subIdToAggregatedResult",
      "subIdToAggregatedResult(uint256):(bool,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new RitualConsumer__subIdToAggregatedResultResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
    );
  }

  try_subIdToAggregatedResult(
    param0: BigInt,
  ): ethereum.CallResult<RitualConsumer__subIdToAggregatedResultResult> {
    let result = super.tryCall(
      "subIdToAggregatedResult",
      "subIdToAggregatedResult(uint256):(bool,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RitualConsumer__subIdToAggregatedResultResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
      ),
    );
  }

  subIdToAllInferences(
    param0: BigInt,
    param1: BigInt,
  ): RitualConsumer__subIdToAllInferencesResult {
    let result = super.call(
      "subIdToAllInferences",
      "subIdToAllInferences(uint256,uint256):(uint256,address,bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new RitualConsumer__subIdToAllInferencesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBytes(),
    );
  }

  try_subIdToAllInferences(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<RitualConsumer__subIdToAllInferencesResult> {
    let result = super.tryCall(
      "subIdToAllInferences",
      "subIdToAllInferences(uint256,uint256):(uint256,address,bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RitualConsumer__subIdToAllInferencesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBytes(),
      ),
    );
  }

  subIdToAvg(subid: BigInt): Array<BigInt> {
    let result = super.call("subIdToAvg", "subIdToAvg(uint32):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(subid),
    ]);

    return result[0].toBigIntArray();
  }

  try_subIdToAvg(subid: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("subIdToAvg", "subIdToAvg(uint32):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(subid),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  subIdToTokenId(param0: BigInt): BigInt {
    let result = super.call(
      "subIdToTokenId",
      "subIdToTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_subIdToTokenId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subIdToTokenId",
      "subIdToTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeight(): BigInt {
    let result = super.call("totalWeight", "totalWeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalWeight", "totalWeight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifierAddress(param0: BigInt): Address {
    let result = super.call(
      "verifierAddress",
      "verifierAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_verifierAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "verifierAddress",
      "verifierAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelsubCall extends ethereum.Call {
  get inputs(): CancelsubCall__Inputs {
    return new CancelsubCall__Inputs(this);
  }

  get outputs(): CancelsubCall__Outputs {
    return new CancelsubCall__Outputs(this);
  }
}

export class CancelsubCall__Inputs {
  _call: CancelsubCall;

  constructor(call: CancelsubCall) {
    this._call = call;
  }

  get subId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelsubCall__Outputs {
  _call: CancelsubCall;

  constructor(call: CancelsubCall) {
    this._call = call;
  }
}

export class CloseWindowCall extends ethereum.Call {
  get inputs(): CloseWindowCall__Inputs {
    return new CloseWindowCall__Inputs(this);
  }

  get outputs(): CloseWindowCall__Outputs {
    return new CloseWindowCall__Outputs(this);
  }
}

export class CloseWindowCall__Inputs {
  _call: CloseWindowCall;

  constructor(call: CloseWindowCall) {
    this._call = call;
  }

  get subId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pushDataOrNot(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class CloseWindowCall__Outputs {
  _call: CloseWindowCall;

  constructor(call: CloseWindowCall) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class RawReceiveComputeCall extends ethereum.Call {
  get inputs(): RawReceiveComputeCall__Inputs {
    return new RawReceiveComputeCall__Inputs(this);
  }

  get outputs(): RawReceiveComputeCall__Outputs {
    return new RawReceiveComputeCall__Outputs(this);
  }
}

export class RawReceiveComputeCall__Inputs {
  _call: RawReceiveComputeCall;

  constructor(call: RawReceiveComputeCall) {
    this._call = call;
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get interval(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get redundancy(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get node(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get input(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get output(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get proof(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get containerId(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get index(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class RawReceiveComputeCall__Outputs {
  _call: RawReceiveComputeCall;

  constructor(call: RawReceiveComputeCall) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class RequestComputeCall extends ethereum.Call {
  get inputs(): RequestComputeCall__Inputs {
    return new RequestComputeCall__Inputs(this);
  }

  get outputs(): RequestComputeCall__Outputs {
    return new RequestComputeCall__Outputs(this);
  }
}

export class RequestComputeCall__Inputs {
  _call: RequestComputeCall;

  constructor(call: RequestComputeCall) {
    this._call = call;
  }

  get model(): string {
    return this._call.inputValues[0].value.toString();
  }

  get inputs(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get redundancy(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get paymentToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get paymentAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get wallet(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get verifier(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get pushInferenceAvgToNftContract(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class RequestComputeCall__Outputs {
  _call: RequestComputeCall;

  constructor(call: RequestComputeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateNFTFeedCall extends ethereum.Call {
  get inputs(): UpdateNFTFeedCall__Inputs {
    return new UpdateNFTFeedCall__Inputs(this);
  }

  get outputs(): UpdateNFTFeedCall__Outputs {
    return new UpdateNFTFeedCall__Outputs(this);
  }
}

export class UpdateNFTFeedCall__Inputs {
  _call: UpdateNFTFeedCall;

  constructor(call: UpdateNFTFeedCall) {
    this._call = call;
  }

  get _nftFeed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateNFTFeedCall__Outputs {
  _call: UpdateNFTFeedCall;

  constructor(call: UpdateNFTFeedCall) {
    this._call = call;
  }
}

export class UpdateNodeWeightCall extends ethereum.Call {
  get inputs(): UpdateNodeWeightCall__Inputs {
    return new UpdateNodeWeightCall__Inputs(this);
  }

  get outputs(): UpdateNodeWeightCall__Outputs {
    return new UpdateNodeWeightCall__Outputs(this);
  }
}

export class UpdateNodeWeightCall__Inputs {
  _call: UpdateNodeWeightCall;

  constructor(call: UpdateNodeWeightCall) {
    this._call = call;
  }

  get node(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateNodeWeightCall__Outputs {
  _call: UpdateNodeWeightCall;

  constructor(call: UpdateNodeWeightCall) {
    this._call = call;
  }
}
