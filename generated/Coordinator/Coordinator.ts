// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class NodeActivated extends ethereum.Event {
  get params(): NodeActivated__Params {
    return new NodeActivated__Params(this);
  }
}

export class NodeActivated__Params {
  _event: NodeActivated;

  constructor(event: NodeActivated) {
    this._event = event;
  }

  get node(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NodeDeactivated extends ethereum.Event {
  get params(): NodeDeactivated__Params {
    return new NodeDeactivated__Params(this);
  }
}

export class NodeDeactivated__Params {
  _event: NodeDeactivated;

  constructor(event: NodeDeactivated) {
    this._event = event;
  }

  get node(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NodeRegistered extends ethereum.Event {
  get params(): NodeRegistered__Params {
    return new NodeRegistered__Params(this);
  }
}

export class NodeRegistered__Params {
  _event: NodeRegistered;

  constructor(event: NodeRegistered) {
    this._event = event;
  }

  get node(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get registerer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get cooldownStart(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SubscriptionCancelled extends ethereum.Event {
  get params(): SubscriptionCancelled__Params {
    return new SubscriptionCancelled__Params(this);
  }
}

export class SubscriptionCancelled__Params {
  _event: SubscriptionCancelled;

  constructor(event: SubscriptionCancelled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SubscriptionCreated extends ethereum.Event {
  get params(): SubscriptionCreated__Params {
    return new SubscriptionCreated__Params(this);
  }
}

export class SubscriptionCreated__Params {
  _event: SubscriptionCreated;

  constructor(event: SubscriptionCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SubscriptionFulfilled extends ethereum.Event {
  get params(): SubscriptionFulfilled__Params {
    return new SubscriptionFulfilled__Params(this);
  }
}

export class SubscriptionFulfilled__Params {
  _event: SubscriptionFulfilled;

  constructor(event: SubscriptionFulfilled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get node(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Coordinator__createSubscriptionDelegateeInputSubStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get activeAt(): BigInt {
    return this[1].toBigInt();
  }

  get period(): BigInt {
    return this[2].toBigInt();
  }

  get frequency(): BigInt {
    return this[3].toBigInt();
  }

  get redundancy(): i32 {
    return this[4].toI32();
  }

  get containerId(): Bytes {
    return this[5].toBytes();
  }

  get lazy(): boolean {
    return this[6].toBoolean();
  }

  get verifier(): Address {
    return this[7].toAddress();
  }

  get paymentAmount(): BigInt {
    return this[8].toBigInt();
  }

  get paymentToken(): Address {
    return this[9].toAddress();
  }

  get wallet(): Address {
    return this[10].toAddress();
  }
}

export class Coordinator__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class Coordinator__getSubscriptionResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get activeAt(): BigInt {
    return this[1].toBigInt();
  }

  get period(): BigInt {
    return this[2].toBigInt();
  }

  get frequency(): BigInt {
    return this[3].toBigInt();
  }

  get redundancy(): i32 {
    return this[4].toI32();
  }

  get containerId(): Bytes {
    return this[5].toBytes();
  }

  get lazy(): boolean {
    return this[6].toBoolean();
  }

  get verifier(): Address {
    return this[7].toAddress();
  }

  get paymentAmount(): BigInt {
    return this[8].toBigInt();
  }

  get paymentToken(): Address {
    return this[9].toAddress();
  }

  get wallet(): Address {
    return this[10].toAddress();
  }
}

export class Coordinator__nodeInfoResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getStatus(): i32 {
    return this.value0;
  }

  getCooldownStart(): BigInt {
    return this.value1;
  }
}

export class Coordinator__proofRequestsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getExpiry(): BigInt {
    return this.value0;
  }

  getNodeWallet(): Address {
    return this.value1;
  }

  getConsumerEscrowed(): BigInt {
    return this.value2;
  }
}

export class Coordinator extends ethereum.SmartContract {
  static bind(address: Address): Coordinator {
    return new Coordinator("Coordinator", address);
  }

  EIP712_NAME(): string {
    let result = super.call("EIP712_NAME", "EIP712_NAME():(string)", []);

    return result[0].toString();
  }

  try_EIP712_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("EIP712_NAME", "EIP712_NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  EIP712_VERSION(): string {
    let result = super.call("EIP712_VERSION", "EIP712_VERSION():(string)", []);

    return result[0].toString();
  }

  try_EIP712_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "EIP712_VERSION",
      "EIP712_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  cooldown(): BigInt {
    let result = super.call("cooldown", "cooldown():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cooldown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cooldown", "cooldown():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createSubscription(
    containerId: string,
    frequency: BigInt,
    period: BigInt,
    redundancy: i32,
    lazy: boolean,
    paymentToken: Address,
    paymentAmount: BigInt,
    wallet: Address,
    verifier: Address,
  ): BigInt {
    let result = super.call(
      "createSubscription",
      "createSubscription(string,uint32,uint32,uint16,bool,address,uint256,address,address):(uint32)",
      [
        ethereum.Value.fromString(containerId),
        ethereum.Value.fromUnsignedBigInt(frequency),
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(redundancy)),
        ethereum.Value.fromBoolean(lazy),
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromUnsignedBigInt(paymentAmount),
        ethereum.Value.fromAddress(wallet),
        ethereum.Value.fromAddress(verifier),
      ],
    );

    return result[0].toBigInt();
  }

  try_createSubscription(
    containerId: string,
    frequency: BigInt,
    period: BigInt,
    redundancy: i32,
    lazy: boolean,
    paymentToken: Address,
    paymentAmount: BigInt,
    wallet: Address,
    verifier: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createSubscription",
      "createSubscription(string,uint32,uint32,uint16,bool,address,uint256,address,address):(uint32)",
      [
        ethereum.Value.fromString(containerId),
        ethereum.Value.fromUnsignedBigInt(frequency),
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(redundancy)),
        ethereum.Value.fromBoolean(lazy),
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromUnsignedBigInt(paymentAmount),
        ethereum.Value.fromAddress(wallet),
        ethereum.Value.fromAddress(verifier),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createSubscriptionDelegatee(
    nonce: BigInt,
    expiry: BigInt,
    sub: Coordinator__createSubscriptionDelegateeInputSubStruct,
    v: i32,
    r: Bytes,
    s: Bytes,
  ): BigInt {
    let result = super.call(
      "createSubscriptionDelegatee",
      "createSubscriptionDelegatee(uint32,uint32,(address,uint32,uint32,uint32,uint16,bytes32,bool,address,uint256,address,address),uint8,bytes32,bytes32):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromTuple(sub),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
      ],
    );

    return result[0].toBigInt();
  }

  try_createSubscriptionDelegatee(
    nonce: BigInt,
    expiry: BigInt,
    sub: Coordinator__createSubscriptionDelegateeInputSubStruct,
    v: i32,
    r: Bytes,
    s: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createSubscriptionDelegatee",
      "createSubscriptionDelegatee(uint32,uint32,(address,uint32,uint32,uint32,uint16,bytes32,bool,address,uint256,address,address),uint8,bytes32,bytes32):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromTuple(sub),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateCreatedIds(param0: Bytes): BigInt {
    let result = super.call(
      "delegateCreatedIds",
      "delegateCreatedIds(bytes32):(uint32)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBigInt();
  }

  try_delegateCreatedIds(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegateCreatedIds",
      "delegateCreatedIds(bytes32):(uint32)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eip712Domain(): Coordinator__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new Coordinator__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<Coordinator__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Coordinator__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  getSubscription(
    subscriptionId: BigInt,
  ): Coordinator__getSubscriptionResultValue0Struct {
    let result = super.call(
      "getSubscription",
      "getSubscription(uint32):((address,uint32,uint32,uint32,uint16,bytes32,bool,address,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(subscriptionId)],
    );

    return changetype<Coordinator__getSubscriptionResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getSubscription(
    subscriptionId: BigInt,
  ): ethereum.CallResult<Coordinator__getSubscriptionResultValue0Struct> {
    let result = super.tryCall(
      "getSubscription",
      "getSubscription(uint32):((address,uint32,uint32,uint32,uint16,bytes32,bool,address,uint256,address,address))",
      [ethereum.Value.fromUnsignedBigInt(subscriptionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Coordinator__getSubscriptionResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getSubscriptionInterval(activeAt: BigInt, period: BigInt): BigInt {
    let result = super.call(
      "getSubscriptionInterval",
      "getSubscriptionInterval(uint32,uint32):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(activeAt),
        ethereum.Value.fromUnsignedBigInt(period),
      ],
    );

    return result[0].toBigInt();
  }

  try_getSubscriptionInterval(
    activeAt: BigInt,
    period: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSubscriptionInterval",
      "getSubscriptionInterval(uint32,uint32):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(activeAt),
        ethereum.Value.fromUnsignedBigInt(period),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  id(): BigInt {
    let result = super.call("id", "id():(uint32)", []);

    return result[0].toBigInt();
  }

  try_id(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("id", "id():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxSubscriberNonce(param0: Address): BigInt {
    let result = super.call(
      "maxSubscriberNonce",
      "maxSubscriberNonce(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_maxSubscriberNonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSubscriberNonce",
      "maxSubscriberNonce(address):(uint32)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nodeInfo(param0: Address): Coordinator__nodeInfoResult {
    let result = super.call("nodeInfo", "nodeInfo(address):(uint8,uint32)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return new Coordinator__nodeInfoResult(
      result[0].toI32(),
      result[1].toBigInt(),
    );
  }

  try_nodeInfo(
    param0: Address,
  ): ethereum.CallResult<Coordinator__nodeInfoResult> {
    let result = super.tryCall("nodeInfo", "nodeInfo(address):(uint8,uint32)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Coordinator__nodeInfoResult(value[0].toI32(), value[1].toBigInt()),
    );
  }

  nodeResponded(param0: Bytes): boolean {
    let result = super.call("nodeResponded", "nodeResponded(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toBoolean();
  }

  try_nodeResponded(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nodeResponded",
      "nodeResponded(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proofRequests(param0: Bytes): Coordinator__proofRequestsResult {
    let result = super.call(
      "proofRequests",
      "proofRequests(bytes32):(uint32,address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new Coordinator__proofRequestsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
    );
  }

  try_proofRequests(
    param0: Bytes,
  ): ethereum.CallResult<Coordinator__proofRequestsResult> {
    let result = super.tryCall(
      "proofRequests",
      "proofRequests(bytes32):(uint32,address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Coordinator__proofRequestsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
      ),
    );
  }

  redundancyCount(param0: Bytes): i32 {
    let result = super.call(
      "redundancyCount",
      "redundancyCount(bytes32):(uint16)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toI32();
  }

  try_redundancyCount(param0: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "redundancyCount",
      "redundancyCount(bytes32):(uint16)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  useManager(): boolean {
    let result = super.call("useManager", "useManager():(bool)", []);

    return result[0].toBoolean();
  }

  try_useManager(): ethereum.CallResult<boolean> {
    let result = super.tryCall("useManager", "useManager():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActivateNodeCall extends ethereum.Call {
  get inputs(): ActivateNodeCall__Inputs {
    return new ActivateNodeCall__Inputs(this);
  }

  get outputs(): ActivateNodeCall__Outputs {
    return new ActivateNodeCall__Outputs(this);
  }
}

export class ActivateNodeCall__Inputs {
  _call: ActivateNodeCall;

  constructor(call: ActivateNodeCall) {
    this._call = call;
  }
}

export class ActivateNodeCall__Outputs {
  _call: ActivateNodeCall;

  constructor(call: ActivateNodeCall) {
    this._call = call;
  }
}

export class CancelSubscriptionCall extends ethereum.Call {
  get inputs(): CancelSubscriptionCall__Inputs {
    return new CancelSubscriptionCall__Inputs(this);
  }

  get outputs(): CancelSubscriptionCall__Outputs {
    return new CancelSubscriptionCall__Outputs(this);
  }
}

export class CancelSubscriptionCall__Inputs {
  _call: CancelSubscriptionCall;

  constructor(call: CancelSubscriptionCall) {
    this._call = call;
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelSubscriptionCall__Outputs {
  _call: CancelSubscriptionCall;

  constructor(call: CancelSubscriptionCall) {
    this._call = call;
  }
}

export class CreateSubscriptionCall extends ethereum.Call {
  get inputs(): CreateSubscriptionCall__Inputs {
    return new CreateSubscriptionCall__Inputs(this);
  }

  get outputs(): CreateSubscriptionCall__Outputs {
    return new CreateSubscriptionCall__Outputs(this);
  }
}

export class CreateSubscriptionCall__Inputs {
  _call: CreateSubscriptionCall;

  constructor(call: CreateSubscriptionCall) {
    this._call = call;
  }

  get containerId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get frequency(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get period(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get redundancy(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get lazy(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get paymentToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get paymentAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get wallet(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get verifier(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class CreateSubscriptionCall__Outputs {
  _call: CreateSubscriptionCall;

  constructor(call: CreateSubscriptionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateSubscriptionDelegateeCall extends ethereum.Call {
  get inputs(): CreateSubscriptionDelegateeCall__Inputs {
    return new CreateSubscriptionDelegateeCall__Inputs(this);
  }

  get outputs(): CreateSubscriptionDelegateeCall__Outputs {
    return new CreateSubscriptionDelegateeCall__Outputs(this);
  }
}

export class CreateSubscriptionDelegateeCall__Inputs {
  _call: CreateSubscriptionDelegateeCall;

  constructor(call: CreateSubscriptionDelegateeCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sub(): CreateSubscriptionDelegateeCallSubStruct {
    return changetype<CreateSubscriptionDelegateeCallSubStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class CreateSubscriptionDelegateeCall__Outputs {
  _call: CreateSubscriptionDelegateeCall;

  constructor(call: CreateSubscriptionDelegateeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateSubscriptionDelegateeCallSubStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get activeAt(): BigInt {
    return this[1].toBigInt();
  }

  get period(): BigInt {
    return this[2].toBigInt();
  }

  get frequency(): BigInt {
    return this[3].toBigInt();
  }

  get redundancy(): i32 {
    return this[4].toI32();
  }

  get containerId(): Bytes {
    return this[5].toBytes();
  }

  get lazy(): boolean {
    return this[6].toBoolean();
  }

  get verifier(): Address {
    return this[7].toAddress();
  }

  get paymentAmount(): BigInt {
    return this[8].toBigInt();
  }

  get paymentToken(): Address {
    return this[9].toAddress();
  }

  get wallet(): Address {
    return this[10].toAddress();
  }
}

export class DeactivateNodeCall extends ethereum.Call {
  get inputs(): DeactivateNodeCall__Inputs {
    return new DeactivateNodeCall__Inputs(this);
  }

  get outputs(): DeactivateNodeCall__Outputs {
    return new DeactivateNodeCall__Outputs(this);
  }
}

export class DeactivateNodeCall__Inputs {
  _call: DeactivateNodeCall;

  constructor(call: DeactivateNodeCall) {
    this._call = call;
  }
}

export class DeactivateNodeCall__Outputs {
  _call: DeactivateNodeCall;

  constructor(call: DeactivateNodeCall) {
    this._call = call;
  }
}

export class DeliverComputeCall extends ethereum.Call {
  get inputs(): DeliverComputeCall__Inputs {
    return new DeliverComputeCall__Inputs(this);
  }

  get outputs(): DeliverComputeCall__Outputs {
    return new DeliverComputeCall__Outputs(this);
  }
}

export class DeliverComputeCall__Inputs {
  _call: DeliverComputeCall;

  constructor(call: DeliverComputeCall) {
    this._call = call;
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deliveryInterval(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get input(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get output(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get proof(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get nodeWallet(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class DeliverComputeCall__Outputs {
  _call: DeliverComputeCall;

  constructor(call: DeliverComputeCall) {
    this._call = call;
  }
}

export class DeliverComputeDelegateeCall extends ethereum.Call {
  get inputs(): DeliverComputeDelegateeCall__Inputs {
    return new DeliverComputeDelegateeCall__Inputs(this);
  }

  get outputs(): DeliverComputeDelegateeCall__Outputs {
    return new DeliverComputeDelegateeCall__Outputs(this);
  }
}

export class DeliverComputeDelegateeCall__Inputs {
  _call: DeliverComputeDelegateeCall;

  constructor(call: DeliverComputeDelegateeCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sub(): DeliverComputeDelegateeCallSubStruct {
    return changetype<DeliverComputeDelegateeCallSubStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get deliveryInterval(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get input(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get output(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get proof(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }

  get nodeWallet(): Address {
    return this._call.inputValues[10].value.toAddress();
  }
}

export class DeliverComputeDelegateeCall__Outputs {
  _call: DeliverComputeDelegateeCall;

  constructor(call: DeliverComputeDelegateeCall) {
    this._call = call;
  }
}

export class DeliverComputeDelegateeCallSubStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get activeAt(): BigInt {
    return this[1].toBigInt();
  }

  get period(): BigInt {
    return this[2].toBigInt();
  }

  get frequency(): BigInt {
    return this[3].toBigInt();
  }

  get redundancy(): i32 {
    return this[4].toI32();
  }

  get containerId(): Bytes {
    return this[5].toBytes();
  }

  get lazy(): boolean {
    return this[6].toBoolean();
  }

  get verifier(): Address {
    return this[7].toAddress();
  }

  get paymentAmount(): BigInt {
    return this[8].toBigInt();
  }

  get paymentToken(): Address {
    return this[9].toAddress();
  }

  get wallet(): Address {
    return this[10].toAddress();
  }
}

export class FinalizeProofVerificationCall extends ethereum.Call {
  get inputs(): FinalizeProofVerificationCall__Inputs {
    return new FinalizeProofVerificationCall__Inputs(this);
  }

  get outputs(): FinalizeProofVerificationCall__Outputs {
    return new FinalizeProofVerificationCall__Outputs(this);
  }
}

export class FinalizeProofVerificationCall__Inputs {
  _call: FinalizeProofVerificationCall;

  constructor(call: FinalizeProofVerificationCall) {
    this._call = call;
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get interval(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get node(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get valid(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class FinalizeProofVerificationCall__Outputs {
  _call: FinalizeProofVerificationCall;

  constructor(call: FinalizeProofVerificationCall) {
    this._call = call;
  }
}

export class RegisterNodeCall extends ethereum.Call {
  get inputs(): RegisterNodeCall__Inputs {
    return new RegisterNodeCall__Inputs(this);
  }

  get outputs(): RegisterNodeCall__Outputs {
    return new RegisterNodeCall__Outputs(this);
  }
}

export class RegisterNodeCall__Inputs {
  _call: RegisterNodeCall;

  constructor(call: RegisterNodeCall) {
    this._call = call;
  }

  get node(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterNodeCall__Outputs {
  _call: RegisterNodeCall;

  constructor(call: RegisterNodeCall) {
    this._call = call;
  }
}

export class SwitchUseManagerCall extends ethereum.Call {
  get inputs(): SwitchUseManagerCall__Inputs {
    return new SwitchUseManagerCall__Inputs(this);
  }

  get outputs(): SwitchUseManagerCall__Outputs {
    return new SwitchUseManagerCall__Outputs(this);
  }
}

export class SwitchUseManagerCall__Inputs {
  _call: SwitchUseManagerCall;

  constructor(call: SwitchUseManagerCall) {
    this._call = call;
  }
}

export class SwitchUseManagerCall__Outputs {
  _call: SwitchUseManagerCall;

  constructor(call: SwitchUseManagerCall) {
    this._call = call;
  }
}
