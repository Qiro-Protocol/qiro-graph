// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ConsumerContractUpdated extends ethereum.Event {
  get params(): ConsumerContractUpdated__Params {
    return new ConsumerContractUpdated__Params(this);
  }
}

export class ConsumerContractUpdated__Params {
  _event: ConsumerContractUpdated;

  constructor(event: ConsumerContractUpdated) {
    this._event = event;
  }

  get oldConsumer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newConsumer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Deny extends ethereum.Event {
  get params(): Deny__Params {
    return new Deny__Params(this);
  }
}

export class Deny__Params {
  _event: Deny;

  constructor(event: Deny) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class File extends ethereum.Event {
  get params(): File__Params {
    return new File__Params(this);
  }
}

export class File__Params {
  _event: File;

  constructor(event: File) {
    this._event = event;
  }

  get what(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFTMinted extends ethereum.Event {
  get params(): NFTMinted__Params {
    return new NFTMinted__Params(this);
  }
}

export class NFTMinted__Params {
  _event: NFTMinted;

  constructor(event: NFTMinted) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get desc(): string {
    return this._event.parameters[3].value.toString();
  }

  get imageURI(): string {
    return this._event.parameters[4].value.toString();
  }

  get portfolioID(): string {
    return this._event.parameters[5].value.toString();
  }

  get noOfLoans(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get totalPrincipalAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get averageInterestRate(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get portfolioTerm(): string {
    return this._event.parameters[9].value.toString();
  }

  get portfolioStatus(): string {
    return this._event.parameters[10].value.toString();
  }

  get writedown(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }

  get writeoff(): BigInt {
    return this._event.parameters[12].value.toBigInt();
  }

  get maturityDate(): string {
    return this._event.parameters[13].value.toString();
  }
}

export class Rely extends ethereum.Event {
  get params(): Rely__Params {
    return new Rely__Params(this);
  }
}

export class Rely__Params {
  _event: Rely;

  constructor(event: Rely) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateNftData extends ethereum.Event {
  get params(): UpdateNftData__Params {
    return new UpdateNftData__Params(this);
  }
}

export class UpdateNftData__Params {
  _event: UpdateNftData;

  constructor(event: UpdateNftData) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get prob_of_default(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get loss_given_default(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get risk_score(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get exposure_at_default(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class QiroNft___tokenMetadataResult {
  value0: string;
  value1: string;
  value2: string;
  value3: string;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: string;
  value8: string;
  value9: BigInt;
  value10: BigInt;
  value11: string;
  value12: BigInt;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: string,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: string,
    value8: string,
    value9: BigInt,
    value10: BigInt,
    value11: string,
    value12: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromString(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromString(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getDescription(): string {
    return this.value1;
  }

  getImageURI(): string {
    return this.value2;
  }

  getPortfolioID(): string {
    return this.value3;
  }

  getNoOfLoans(): BigInt {
    return this.value4;
  }

  getTotalPrincipalAmount(): BigInt {
    return this.value5;
  }

  getAverageInterestRate(): BigInt {
    return this.value6;
  }

  getPortfolioTerm(): string {
    return this.value7;
  }

  getPortfolioStatus(): string {
    return this.value8;
  }

  getWritedown(): BigInt {
    return this.value9;
  }

  getWriteoff(): BigInt {
    return this.value10;
  }

  getMaturityDate(): string {
    return this.value11;
  }

  getCollateralValue(): BigInt {
    return this.value12;
  }
}

export class QiroNft__tokenIdToDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getProb_of_default(): BigInt {
    return this.value0;
  }

  getLoss_given_default(): BigInt {
    return this.value1;
  }

  getRisk_score(): BigInt {
    return this.value2;
  }

  getExposure_at_default(): BigInt {
    return this.value3;
  }

  getInterest_rate(): BigInt {
    return this.value4;
  }

  getNav(): BigInt {
    return this.value5;
  }

  getUnderwritten(): boolean {
    return this.value6;
  }
}

export class QiroNft extends ethereum.SmartContract {
  static bind(address: Address): QiroNft {
    return new QiroNft("QiroNft", address);
  }

  _tokenMetadata(param0: BigInt): QiroNft___tokenMetadataResult {
    let result = super.call(
      "_tokenMetadata",
      "_tokenMetadata(uint256):(string,string,string,string,uint256,uint256,uint256,string,string,uint256,uint256,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new QiroNft___tokenMetadataResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toString(),
      result[8].toString(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toString(),
      result[12].toBigInt(),
    );
  }

  try__tokenMetadata(
    param0: BigInt,
  ): ethereum.CallResult<QiroNft___tokenMetadataResult> {
    let result = super.tryCall(
      "_tokenMetadata",
      "_tokenMetadata(uint256):(string,string,string,string,uint256,uint256,uint256,string,string,uint256,uint256,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QiroNft___tokenMetadataResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toString(),
        value[8].toString(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toString(),
        value[12].toBigInt(),
      ),
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bytesToString(_data: Bytes): string {
    let result = super.call("bytesToString", "bytesToString(bytes):(string)", [
      ethereum.Value.fromBytes(_data),
    ]);

    return result[0].toString();
  }

  try_bytesToString(_data: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "bytesToString",
      "bytesToString(bytes):(string)",
      [ethereum.Value.fromBytes(_data)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getArweave(tokenId: BigInt): string {
    let result = super.call("getArweave", "getArweave(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_getArweave(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getArweave", "getArweave(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isConsumerContract(param0: Address): boolean {
    let result = super.call(
      "isConsumerContract",
      "isConsumerContract(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_isConsumerContract(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isConsumerContract",
      "isConsumerContract(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUnderwitten(tokenId: BigInt): boolean {
    let result = super.call("isUnderwitten", "isUnderwitten(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toBoolean();
  }

  try_isUnderwitten(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUnderwitten",
      "isUnderwitten(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loanPrincipal(param0: BigInt): BigInt {
    let result = super.call(
      "loanPrincipal",
      "loanPrincipal(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_loanPrincipal(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loanPrincipal",
      "loanPrincipal(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(
    to: Address,
    _name: string,
    desc: string,
    imageURI: string,
    _portfolioID: string,
    _maturityDate: string,
    _portfolioTerm: string,
    _portfolioStatus: string,
    _portfolioData: Array<BigInt>,
  ): BigInt {
    let result = super.call(
      "mint",
      "mint(address,string,string,string,string,string,string,string,uint256[6]):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(desc),
        ethereum.Value.fromString(imageURI),
        ethereum.Value.fromString(_portfolioID),
        ethereum.Value.fromString(_maturityDate),
        ethereum.Value.fromString(_portfolioTerm),
        ethereum.Value.fromString(_portfolioStatus),
        ethereum.Value.fromUnsignedBigIntArray(_portfolioData),
      ],
    );

    return result[0].toBigInt();
  }

  try_mint(
    to: Address,
    _name: string,
    desc: string,
    imageURI: string,
    _portfolioID: string,
    _maturityDate: string,
    _portfolioTerm: string,
    _portfolioStatus: string,
    _portfolioData: Array<BigInt>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(address,string,string,string,string,string,string,string,uint256[6]):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(desc),
        ethereum.Value.fromString(imageURI),
        ethereum.Value.fromString(_portfolioID),
        ethereum.Value.fromString(_maturityDate),
        ethereum.Value.fromString(_portfolioTerm),
        ethereum.Value.fromString(_portfolioStatus),
        ethereum.Value.fromUnsignedBigIntArray(_portfolioData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minters(param0: Address): boolean {
    let result = super.call("minters", "minters(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_minters(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("minters", "minters(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  qiroConsumer(): Address {
    let result = super.call("qiroConsumer", "qiroConsumer():(address)", []);

    return result[0].toAddress();
  }

  try_qiroConsumer(): ethereum.CallResult<Address> {
    let result = super.tryCall("qiroConsumer", "qiroConsumer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenIdToArweave(param0: BigInt): string {
    let result = super.call(
      "tokenIdToArweave",
      "tokenIdToArweave(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toString();
  }

  try_tokenIdToArweave(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "tokenIdToArweave",
      "tokenIdToArweave(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenIdToData(param0: BigInt): QiroNft__tokenIdToDataResult {
    let result = super.call(
      "tokenIdToData",
      "tokenIdToData(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new QiroNft__tokenIdToDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
    );
  }

  try_tokenIdToData(
    param0: BigInt,
  ): ethereum.CallResult<QiroNft__tokenIdToDataResult> {
    let result = super.tryCall(
      "tokenIdToData",
      "tokenIdToData(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new QiroNft__tokenIdToDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
      ),
    );
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddConsumerContractCall extends ethereum.Call {
  get inputs(): AddConsumerContractCall__Inputs {
    return new AddConsumerContractCall__Inputs(this);
  }

  get outputs(): AddConsumerContractCall__Outputs {
    return new AddConsumerContractCall__Outputs(this);
  }
}

export class AddConsumerContractCall__Inputs {
  _call: AddConsumerContractCall;

  constructor(call: AddConsumerContractCall) {
    this._call = call;
  }

  get _consumer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddConsumerContractCall__Outputs {
  _call: AddConsumerContractCall;

  constructor(call: AddConsumerContractCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class DependCall extends ethereum.Call {
  get inputs(): DependCall__Inputs {
    return new DependCall__Inputs(this);
  }

  get outputs(): DependCall__Outputs {
    return new DependCall__Outputs(this);
  }
}

export class DependCall__Inputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DependCall__Outputs {
  _call: DependCall;

  constructor(call: DependCall) {
    this._call = call;
  }
}

export class FileCall extends ethereum.Call {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get desc(): string {
    return this._call.inputValues[2].value.toString();
  }

  get imageURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _portfolioID(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _maturityDate(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _portfolioTerm(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _portfolioStatus(): string {
    return this._call.inputValues[7].value.toString();
  }

  get _portfolioData(): Array<BigInt> {
    return this._call.inputValues[8].value.toBigIntArray();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class ResetUnderwrittenCall extends ethereum.Call {
  get inputs(): ResetUnderwrittenCall__Inputs {
    return new ResetUnderwrittenCall__Inputs(this);
  }

  get outputs(): ResetUnderwrittenCall__Outputs {
    return new ResetUnderwrittenCall__Outputs(this);
  }
}

export class ResetUnderwrittenCall__Inputs {
  _call: ResetUnderwrittenCall;

  constructor(call: ResetUnderwrittenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetUnderwrittenCall__Outputs {
  _call: ResetUnderwrittenCall;

  constructor(call: ResetUnderwrittenCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetArweaveCall extends ethereum.Call {
  get inputs(): SetArweaveCall__Inputs {
    return new SetArweaveCall__Inputs(this);
  }

  get outputs(): SetArweaveCall__Outputs {
    return new SetArweaveCall__Outputs(this);
  }
}

export class SetArweaveCall__Inputs {
  _call: SetArweaveCall;

  constructor(call: SetArweaveCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get arweave(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetArweaveCall__Outputs {
  _call: SetArweaveCall;

  constructor(call: SetArweaveCall) {
    this._call = call;
  }
}

export class SetMinterCall extends ethereum.Call {
  get inputs(): SetMinterCall__Inputs {
    return new SetMinterCall__Inputs(this);
  }

  get outputs(): SetMinterCall__Outputs {
    return new SetMinterCall__Outputs(this);
  }
}

export class SetMinterCall__Inputs {
  _call: SetMinterCall;

  constructor(call: SetMinterCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMinterCall__Outputs {
  _call: SetMinterCall;

  constructor(call: SetMinterCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateConsumerNFTFeedCall extends ethereum.Call {
  get inputs(): UpdateConsumerNFTFeedCall__Inputs {
    return new UpdateConsumerNFTFeedCall__Inputs(this);
  }

  get outputs(): UpdateConsumerNFTFeedCall__Outputs {
    return new UpdateConsumerNFTFeedCall__Outputs(this);
  }
}

export class UpdateConsumerNFTFeedCall__Inputs {
  _call: UpdateConsumerNFTFeedCall;

  constructor(call: UpdateConsumerNFTFeedCall) {
    this._call = call;
  }
}

export class UpdateConsumerNFTFeedCall__Outputs {
  _call: UpdateConsumerNFTFeedCall;

  constructor(call: UpdateConsumerNFTFeedCall) {
    this._call = call;
  }
}

export class UpdateDataForTokenIDCall extends ethereum.Call {
  get inputs(): UpdateDataForTokenIDCall__Inputs {
    return new UpdateDataForTokenIDCall__Inputs(this);
  }

  get outputs(): UpdateDataForTokenIDCall__Outputs {
    return new UpdateDataForTokenIDCall__Outputs(this);
  }
}

export class UpdateDataForTokenIDCall__Inputs {
  _call: UpdateDataForTokenIDCall;

  constructor(call: UpdateDataForTokenIDCall) {
    this._call = call;
  }

  get inferenceResults(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateDataForTokenIDCall__Outputs {
  _call: UpdateDataForTokenIDCall;

  constructor(call: UpdateDataForTokenIDCall) {
    this._call = call;
  }
}
