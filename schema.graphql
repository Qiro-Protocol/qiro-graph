type PoolDeployed @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  seniorRate: BigInt! # uint256
  interestRate: BigInt! # uint256
  periodLength: BigInt! # uint256
  periodCount: BigInt! # uint256
  gracePeriod: BigInt! # uint256
  operator: Bytes! # address
  shelf: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Supply @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  supplier: Bytes! # address
  currencyAmount: BigInt!
  totalPoolBalance: BigInt!
  juniorPoolBalance: BigInt!
  seniorPoolBalance: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type Redeem @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  tranche: String!
  receiver: Bytes! # address
  tokenAmount: BigInt!
  currencyAmount: BigInt!
  totalPoolBalance: BigInt!
  juniorPoolBalance: BigInt!
  seniorPoolBalance: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

enum PoolStatus {
  CAPITAL_FORMATION
  PENDING
  ACTIVE
  ENDED
}
# main Schema
type Pool @entity(immutable: false) {
  id: Bytes!
  poolId: BigInt! # uint256
  poolStatus: PoolStatus! # enum
  operator: Bytes! # address
  shelf: Bytes! # address
  juniorTranche: Tranche! # Tranche
  seniorRate: BigInt! # uint256
  seniorTranche: Tranche! # Tranche
  interestRate: BigInt! # uint256
  periodLength: BigInt! # uint256
  periodCount: BigInt! # uint256
  loanTerm: BigInt! # uint256
  gracePeriod: BigInt! # uint256
  totalBalance: BigInt! # uint256
  startTimestamp: BigInt! # uint256
  loanMaturityTimestamp: BigInt! # uint256
  totalRepaid: BigInt! # uint256
  principalRepaid: BigInt! # uint256
  interestRepaid: BigInt! # uint256
  capitalFormationPeriod: BigInt! # uint256
  capitalFormationPeriodEnd: BigInt! # uint256
  nextExpectedRepayment: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  lenders: [UserPool!] @derivedFrom(field: "lendedPool")
  borrower: BorrowerPool
}

type Tranche @entity(immutable: false) {
  id: Bytes!
  poolId: BigInt! # uint256
  trancheType: String!
  trancheAddress: Bytes!
  tokenAddress: Bytes! # address
  totalBalance: BigInt!
  totalTokenSupply: BigInt!
  tokenPrice: BigInt!
  tokenName: String!
  tokenSymbol: String!
  blockTimestamp: BigInt!
}

type LoanStarted @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LoanEnded @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LoanRepayed @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  amountRepayed: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LoanWithdrawn @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  amountWithdrawn: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Lender @entity(immutable: false) {
  id: Bytes!
  address: Bytes!
  pools: [BigInt!]!
  totalInvested: BigInt!
  juniorInvestedBalance: BigInt!
  seniorInvestedBalance: BigInt!
  blockTimestamp: BigInt!
}

type Borrower @entity(immutable: false) {
  id: Bytes!
  address: Bytes!
  poolsBorrowedFrom: [BigInt!]!
  totalBorrowed: BigInt!
  totalRepaid: BigInt!
  blockTimestamp: BigInt!
}

enum TxnTypes {
  MINT
  SENIOR_DEPOSIT
  JUNIOR_DEPOSIT
  SENIOR_REDEEM
  JUNIOR_REDEEM
  POOL_CREATED
  POOL_INITIALED
  BORROWER_WITHDRAW
  BORROWER_REPAY
}

type Transaction @entity(immutable: true) {
  id: Bytes!
  hash: Bytes!
  name: TxnTypes
  timestamp: BigInt!
  amountUSDC: BigInt!
  amount: BigInt!
  from: Bytes!
}

type User @entity(immutable: false) {
  id: Bytes!
  address: Bytes!
  isLender: Boolean!
  isBorrower: Boolean!
  poolsBorrowedFrom: [BorrowerPool!]! @derivedFrom(field: "user")
  poolsLendedIn: [UserPool!] @derivedFrom(field: "user")
  totalLended: BigInt!
  totalInterestEarned: BigInt!
  totalBorrowed: BigInt!
  totalRepayed: BigInt!
  transactionHistory: [Transaction!]!
}

type UserPool @entity {
  id: Bytes!
  user: User!
  lendedPool: Pool!
}

type BorrowerPool @entity {
  id: Bytes!
  user: User!
  borrowedPool: Pool!
}

type ComputeSubscription @entity {
  id: Bytes!
  subscriptionId: BigInt!
  tokenId: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  subscriptionResponses: [SubscriptionResponse!]!
    @derivedFrom(field: "subscription")
  average_prob_of_default: BigInt!
  average_loss_given_default: BigInt!
  average_risk_score: BigInt!
  average_exposure_at_default: BigInt!
}

type SubscriptionResponse @entity {
  id: Bytes!
  subscription: ComputeSubscription!
  output: Bytes!
  input: Bytes!
  proof: Bytes!
  nodeAddress: Bytes!
  isProofVerifiedOnchain: Boolean!
  prob_of_default: BigInt!
  loss_given_default: BigInt!
  risk_score: BigInt!
  exposure_at_default: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonitoringSubscription @entity {
  id: Bytes!
  subscriptionId: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  subscriptionResponses: [MonitoringResponse!]!
    @derivedFrom(field: "subscription")
}

type MonitoringResponse @entity {
  id: Bytes!
  subscription: MonitoringSubscription!
  output: Bytes!
  input: Bytes!
  proof: Bytes!
  nodeAddress: Bytes!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
