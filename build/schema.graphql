type PoolDeployed @entity(immutable: false) {
  id: Bytes!
  poolId: BigInt! # uint256
  pool: Pool! # uint256
  seniorRate: BigInt! # uint256
  interestRate: BigInt! # uint256
  periodLength: BigInt! # uint256
  periodCount: BigInt! # uint256
  gracePeriod: BigInt! # uint256
  operator: Bytes! # address
  shelf: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
} # done

type SupplyRedeem @entity(immutable: false) {
  id: Bytes!
  pool: Pool! # uint256
  tranche: Tranche! # Tranche
  supplierOrReciever: Bytes! # address
  currencyAmount: BigInt!
  tokenAmount: BigInt!
  price: BigInt! # uint256
  totalPoolBalance: BigInt!
  juniorPoolBalance: BigInt!
  seniorPoolBalance: BigInt!
  actionType: SupplyRedeemType! # enum
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
} # done

enum PoolStatus {
  CAPITAL_FORMATION
  PENDING
  ACTIVE
  REVOKED
  REPAYMENT_STARTED
  REDEEM
  ENDED
}

enum SupplyRedeemType {
  SUPPLY
  REDEEM
}

enum PoolType {
  LOAN
  SECURITISATION
}

type QiroFactory @entity(immutable: false) {
  id: Bytes!
  shelfFab: Bytes! # address
  trustOperatorFab: Bytes! # address
  whitelistOperatorFab: Bytes! # address
  defaultAssessorFab: Bytes! # address
  distributorFab: Bytes! # address
  seniorTrancheFab: Bytes! # address
  juniorTrancheFab: Bytes! # address
  qiroFeeCollector: Bytes! # address
  owner: Bytes! # address
  whitelistManager: Bytes! # address
  poolCount: BigInt! # uint256
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nftContractAddress: Bytes! # address
  currency: Bytes! # address
} # done

# main Schema
type Pool @entity(immutable: false) {
  id: Bytes!
  poolId: BigInt! # uint256
  poolStatus: PoolStatus! # enum
  operator: Bytes! # address
  shelfBalance: BigInt! # uint256
  shelfDebt: BigInt! # uint256
  seniorInterestRate: BigInt! # uint256
  interestRate: BigInt! # uint256
  periodLength: BigInt! # uint256
  periodCount: BigInt! # uint256
  loanTerm: BigInt! # uint256
  gracePeriod: BigInt! # uint256
  totalBalance: BigInt! # uint256
  startTimestamp: BigInt! # uint256
  loanMaturityTimestamp: BigInt! # uint256
  totalRepaid: BigInt! # uint256
  principalRepaid: BigInt! # uint256
  interestRepaid: BigInt! # uint256
  prepaymentAbsorbedAmount: BigInt! # uint256
  lateFeeRepaid: BigInt! # uint256
  capitalFormationPeriod: BigInt! # uint256
  capitalFormationPeriodEnd: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  principalAmount: BigInt! # uint256
  interestAmount: BigInt! # uint256
  writeoffAmount: BigInt! # uint256
  totalTrancheBalance: BigInt! # uint256
  trancheSupplyMaxBalance: BigInt! # uint256
  outstandingPrincipal: BigInt! # uint256
  outstandingInterest: BigInt! # uint256
  isBullet: Boolean! # bool
  poolType: PoolType! # enum
  isPaused: Boolean! # bool
  borrower: Borrower! # address
  originatorFeePaid: BigInt! # uint256
  pStartFrom: BigInt! # uint256
  pRepayFrequency: BigInt! # uint256
  juniorTranche: Tranche!
  seniorTranche: Tranche!
  nftTokenId: BigInt! # uint256
  addresses: PoolAddresses! @derivedFrom(field: "pool")
  # done
  lenders: [Lender!] @derivedFrom(field: "pool")
  repayments: [LoanRepayed!] @derivedFrom(field: "pool")
  withdrawals: [LoanWithdrawn!] @derivedFrom(field: "pool")
  supplyRedeems: [SupplyRedeem!] @derivedFrom(field: "pool")
  poolDeployed: PoolDeployed! @derivedFrom(field: "pool")
}

type PoolAddresses @entity(immutable: false) {
  id: Bytes!
  pool: Pool! # uint256
  shelf: Bytes! # address
  operator: Bytes! # address
  trustOperator: Bytes! # address
  juniorTranche: Bytes! # address
  seniorTranche: Bytes! # address
  lenderDeployer: Bytes! # address
  borrowerDeployer: Bytes! # address
  nftContractAddress: Bytes! # address
  admin: Bytes! # address
  currency: PoolCurrency!
  seniorToken: Bytes! # address
  juniorToken: Bytes! # address
  root: Bytes! # address
  # add more addresses as needed
} # done

type PoolCurrency @entity(immutable: false) {
  id: Bytes!
  address: Bytes! # address
  symbol: String!
  decimals: Int!
} # done

enum TrancheType {
  JUNIOR
  SENIOR
}

type Tranche @entity(immutable: false) {
  id: Bytes!
  pool: Pool! # uint256
  trancheType: TrancheType!
  tokenAddress: Bytes! # address
  balance: BigInt!
  totalTokenSupply: BigInt!
  tokenName: String!
  tokenSymbol: String!
  totalInvested: BigInt!
  totalRedeemed: BigInt!
  totalRepaid: BigInt!
  ceiling: BigInt! # uint256
  blockTimestamp: BigInt!
  transactionHash: Bytes!
} # done

type LoanStarted @entity(immutable: false) {
  id: Bytes!
  pool: Pool! # uint256
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
} #done

type LoanEnded @entity(immutable: false) {
  id: Bytes!
  pool: Pool! # uint256
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
} #done

type LoanRepayed @entity(immutable: false) {
  id: Bytes!
  pool: Pool! # uint256
  borrower: Borrower! # address
  amountRepayed: BigInt!
  principalRepayed: BigInt!
  interestRepayed: BigInt!
  lateFeeRepayed: BigInt!
  seniorTotalRepaid: BigInt!
  juniorTotalRepaid: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
} #done

type LoanWithdrawn @entity(immutable: false) {
  id: Bytes!
  pool: Pool! # uint256
  borrower: Borrower! # address
  withdrawTo: Bytes! # address
  amount: BigInt! # uint256
  blockTimestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
} #done

type Lender @entity(immutable: false) {
  id: Bytes! # lenderAddress+poolId+trancheAddress
  address: Bytes! # address
  tranche: Tranche! # uint256
  pool: Pool! # uint256
  blockTimestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  currencySupplied: BigInt # uint256 #pool level
  currencyRedeemed: BigInt # uint256 # pool level
  tokensRedeem: BigInt # uint256 # tranche level
  trancheTokenBalance: BigInt # uint256 # tranche level
} #done

type Borrower @entity(immutable: false) {
  id: Bytes!
  poolsBorrowedFrom: [Pool!] @derivedFrom(field: "borrower")
  blockTimestamp: BigInt!
} #done

# these are not included in implementation yet
type Rely @entity(immutable: false) {
  id: Bytes!
  usr: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deny @entity(immutable: false) {
  id: Bytes!
  usr: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type File @entity(immutable: false) {
  id: Bytes!
  what: Bytes! # bytes32
  tokenId: BigInt! # uint256
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTMinted @entity(immutable: false) {
  id: Bytes!
  to: Bytes! # address
  tokenId: BigInt! # uint256
  name: String! # string
  desc: String! # string
  imageURI: String! # string
  portfolioID: String! # string
  noOfLoans: BigInt! # uint256
  totalPrincipalAmount: BigInt! # uint256
  averageInterestRate: BigInt! # uint256
  portfolioTerm: String! # string
  portfolioStatus: String! # string
  writedown: BigInt! # uint256
  writeoff: BigInt! # uint256
  maturityDate: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  nftContractAddress: Bytes! # address
  arweaveId: String! # string
}

# ___________________________________________________________
# _______________ Compute Subscription Schema _______________
# ___________________________________________________________

type ComputeSubscription @entity {
  id: Bytes!
  subscriptionId: BigInt!
  tokenId: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  subscriptionResponses: [SubscriptionResponse!]!
    @derivedFrom(field: "subscription")
  average_prob_of_default: BigInt!
  average_loss_given_default: BigInt!
  average_risk_score: BigInt!
  average_exposure_at_default: BigInt!
  coordinatorAddress: Bytes!
}

type SubscriptionResponse @entity {
  id: Bytes!
  subscription: ComputeSubscription!
  output: Bytes!
  input: Bytes!
  proof: Bytes!
  nodeAddress: Bytes!
  isProofVerifiedOnchain: Boolean!
  prob_of_default: BigInt!
  loss_given_default: BigInt!
  risk_score: BigInt!
  exposure_at_default: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MonitoringSubscription @entity {
  id: Bytes!
  subscriptionId: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  subscriptionResponses: [MonitoringResponse!]!
    @derivedFrom(field: "subscription")
}

type MonitoringResponse @entity {
  id: Bytes!
  subscription: MonitoringSubscription!
  output: Bytes!
  input: Bytes!
  proof: Bytes!
  nodeAddress: Bytes!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConsumerContractUpdated @entity(immutable: false) {
  id: Bytes!
  oldConsumer: Bytes! # address
  newConsumer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: false) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateNftData @entity(immutable: false) {
  id: Bytes!
  tokenId: BigInt! # uint256
  prob_of_default: BigInt! # uint256
  loss_given_default: BigInt! # uint256
  risk_score: BigInt! # uint256
  exposure_at_default: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# todo: @rahul7668gupta add entity to index all other data
